{
  "schema_version": "1.0",
  "bundles": [
    {
      "name": "minimal",
      "description": "Bare minimum essentials for productivity",
      "category": "legacy",
      "tools": ["fd", "ripgrep", "fzf"],
      "tags": ["essential", "search", "productivity"]
    },
    {
      "name": "essential",
      "description": "Modern terminal essentials that everyone should have",
      "category": "legacy",
      "tools": ["fd", "ripgrep", "fzf", "bat", "eza", "jq", "zoxide"],
      "tags": ["essential", "terminal", "productivity", "search", "navigation"]
    },
    {
      "name": "system-foundation",
      "description": "Essential base system packages for development environments",
      "category": "foundation",
      "tools": [],
      "system_packages": [
        "build-essential", "git", "curl", "wget", "gnupg", "lsb-release", 
        "software-properties-common", "ca-certificates", "locales", "unzip", "sudo",
        "cmake", "ninja-build", "gdb", "strace", "ltrace", "lsof", "xclip", 
        "tmux", "zsh", "fish", "universal-ctags", "silversearcher-ag"
      ],
      "package_managers": {
        "apt": [
          "build-essential", "git", "curl", "wget", "gnupg", "lsb-release", 
          "software-properties-common", "ca-certificates", "locales", "unzip", "sudo",
          "cmake", "ninja-build", "gdb", "strace", "ltrace", "lsof", "xclip", 
          "tmux", "zsh", "fish", "universal-ctags", "silversearcher-ag"
        ],
        "yum": [
          "@Development Tools", "git", "curl", "wget", "gnupg2", "redhat-lsb-core",
          "ca-certificates", "glibc-locale-source", "unzip", "sudo",
          "cmake", "ninja-build", "gdb", "strace", "ltrace", "lsof", "xclip",
          "tmux", "zsh", "fish", "ctags", "the_silver_searcher"
        ],
        "dnf": [
          "@Development Tools", "git", "curl", "wget", "gnupg2", "redhat-lsb-core", 
          "ca-certificates", "glibc-locale-source", "unzip", "sudo",
          "cmake", "ninja-build", "gdb", "strace", "ltrace", "lsof", "xclip",
          "tmux", "zsh", "fish", "ctags", "the_silver_searcher"
        ]
      },
      "post_install": [
        "echo '🏗️  System foundation installed successfully!'",
        "echo ''",
        "echo '📦 Development essentials:'",
        "echo '  🔨 build-essential: C/C++ compilation tools'",
        "echo '  📁 git: Version control system'", 
        "echo '  🌐 curl/wget: Download utilities'",
        "echo '  🔑 gnupg: GPG signing and verification'",
        "echo ''",
        "echo '🛠️  Development tools:'",
        "echo '  🏗️  cmake/ninja: Build systems'",
        "echo '  🐛 gdb/strace/ltrace: Debugging tools'",
        "echo '  📊 lsof: Process monitoring'",
        "echo '  📋 xclip: Clipboard access'",
        "echo ''",
        "echo '🐚 Shell environments:'",
        "echo '  🐚 zsh: Modern shell'",
        "echo '  🐟 fish: User-friendly shell'",
        "echo '  📺 tmux: Terminal multiplexer'",
        "echo ''",
        "echo 'Next steps:'",
        "echo '  gearbox install --bundle python-dev   # Python development'",
        "echo '  gearbox install --bundle nodejs-dev  # Node.js development'",
        "echo '  gearbox install --bundle docker   # Container development'"
      ],
      "tags": ["foundation", "base", "development", "system"]
    },
    {
      "name": "beginner",
      "description": "Perfect starting point for new developers (essential tools + beautiful terminal)",
      "category": "foundation",
      "tools": ["starship", "nerd-fonts"],
      "includes_bundles": ["essential"],
      "tags": ["foundation", "beginner", "user-journey", "starter"]
    },
    {
      "name": "intermediate",
      "description": "Productive developer environment with git workflow and development tools",
      "category": "foundation",
      "tools": ["delta", "lazygit", "gh", "tokei", "sd", "tealdeer", "just", "mise"],
      "system_packages": ["git", "curl", "wget", "tree"],
      "package_managers": {
        "apt": ["git", "curl", "wget", "tree"],
        "yum": ["git", "curl", "wget", "tree"],
        "dnf": ["git", "curl", "wget", "tree"]
      },
      "includes_bundles": ["beginner"],
      "tags": ["foundation", "intermediate", "user-journey", "git", "development"]
    },
    {
      "name": "advanced",
      "description": "High-performance development environment with debugging and performance tools",
      "category": "foundation",
      "tools": ["hyperfine", "bottom", "procs", "difftastic"],
      "includes_bundles": ["intermediate"],
      "tags": ["foundation", "advanced", "user-journey", "performance", "debugging"]
    },
    {
      "name": "fullstack-dev",
      "description": "Complete fullstack web development environment (frontend + backend + databases)",
      "category": "domain",
      "tools": ["jq", "xsv"],
      "system_packages": ["nodejs", "npm", "postgresql-client", "mysql-client", "redis-tools", "nginx"],
      "package_managers": {
        "apt": ["nodejs", "npm", "postgresql-client", "mysql-client", "redis-tools", "nginx"],
        "yum": ["nodejs", "npm", "postgresql", "mysql", "redis", "nginx"],
        "dnf": ["nodejs", "npm", "postgresql", "mysql", "redis", "nginx"]
      },
      "post_install": [
        "npm install -g typescript",
        "npm install -g ts-node",
        "npm install -g eslint",
        "npm install -g prettier",
        "npm install -g @angular/cli",
        "npm install -g @vue/cli",
        "npm install -g create-react-app",
        "npm install -g yarn",
        "npm install -g pnpm",
        "npm install -g nodemon",
        "npm install -g jest",
        "npm install -g webpack-cli",
        "echo ''",
        "echo '🌐 Fullstack web development environment ready!'",
        "echo '   📦 Frontend: TypeScript, React, Vue, Angular'",
        "echo '   🔧 Tools: ESLint, Prettier, Jest, Webpack'",
        "echo '   🗄️  Backend: Node.js + database clients'",
        "echo '   🌐 Server: nginx for reverse proxy'",
        "echo ''",
        "echo '🚀 Quick start:'",
        "echo '   npx create-react-app my-app    # React project'",
        "echo '   npm create vue@latest my-vue   # Vue project'",
        "echo '   ng new my-angular-app          # Angular project'"
      ],
      "includes_bundles": ["intermediate"],
      "tags": ["domain", "fullstack", "web", "frontend", "backend", "database"]
    },
    {
      "name": "mobile-dev",
      "description": "Cross-platform mobile development environment",
      "category": "domain",
      "tools": [],
      "system_packages": ["nodejs", "npm"],
      "package_managers": {
        "apt": ["nodejs", "npm"],
        "yum": ["nodejs", "npm"],
        "dnf": ["nodejs", "npm"]
      },
      "post_install": [
        "npm install -g react-native-cli",
        "npm install -g @ionic/cli",
        "npm install -g cordova",
        "npm install -g @capacitor/cli"
      ],
      "includes_bundles": ["intermediate"],
      "tags": ["domain", "mobile", "react-native", "ionic", "cordova", "cross-platform"]
    },
    {
      "name": "data-dev",
      "description": "Data science and machine learning development environment with advanced analytics", 
      "category": "domain",
      "tools": ["jq", "xsv", "choose", "hyperfine"],
      "system_packages": ["r-base", "octave"],
      "package_managers": {
        "apt": ["r-base", "r-base-dev", "octave"],
        "yum": ["R", "R-devel", "octave"],
        "dnf": ["R", "R-devel", "octave"]
      },
      "includes_bundles": ["python-dev"],
      "post_install": [
        "pipx install jupyter",
        "pipx install jupyterlab",
        "pipx install pandas",
        "pipx install numpy",
        "pipx install matplotlib",
        "pipx install seaborn",
        "pipx install scikit-learn",
        "pipx install tensorflow",
        "pipx install torch",
        "pipx install plotly",
        "pipx install streamlit",
        "pipx install dask",
        "echo ''",
        "echo '📊 Advanced data science environment ready!'",
        "echo ''",
        "echo '🐍 Python Data Stack:'",
        "echo '   📓 Jupyter Lab: Advanced notebook interface'",
        "echo '   📈 Analysis: pandas, numpy (core data manipulation)'",
        "echo '   📊 Visualization: matplotlib, seaborn, plotly'",
        "echo '   🤖 Machine Learning: scikit-learn, tensorflow, pytorch'",
        "echo '   🚀 Apps: streamlit for web dashboards'",
        "echo '   ⚡ Performance: dask for parallel computing'",
        "echo ''",
        "echo '📊 Multi-Language Analytics:'",
        "echo '   📊 R: Statistical computing and graphics'",
        "echo '   🔢 Octave: MATLAB-compatible numerical analysis'",
        "echo ''",
        "echo '🔧 Data Processing Tools:'",
        "echo '   🔍 jq: JSON data processing'",
        "echo '   📋 xsv: CSV toolkit for large datasets'",
        "echo '   ✂️  choose: Text column selection'",
        "echo '   ⚡ hyperfine: Performance benchmarking'",
        "echo ''",
        "echo '🚀 Quick start:'",
        "echo '   jupyter lab                 # Launch JupyterLab'",
        "echo '   streamlit hello            # Demo web app'",
        "echo '   python -c \"import pandas\"  # Test Python stack'",
        "echo '   R                          # Launch R console'"
      ],
      "tags": ["domain", "data-science", "machine-learning", "analytics", "jupyter", "pandas", "r", "statistics"]
    },
    {
      "name": "devops-dev",
      "description": "Infrastructure, monitoring, and deployment toolkit with cloud and container tools",
      "category": "domain",
      "tools": ["bandwhich", "dust", "podman", "ctop", "trivy"],
      "includes_bundles": ["docker", "cloud-tools", "advanced"],
      "post_install": [
        "curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/ || true",
        "echo '🚀 DevOps container toolkit ready:'",
        "echo '  🐳 Docker + Podman (rootless alternative)'", 
        "echo '  📊 ctop: Container monitoring TUI'",
        "echo '  🛡️  trivy: Security scanning for deployments'",
        "echo '  🌐 Network monitoring: bandwhich'",
        "echo '  ☸️  Kubernetes: kubectl ready'",
        "echo '  ☁️  Cloud: AWS CLI v2'"
      ],
      "tags": ["domain", "devops", "infrastructure", "monitoring", "deployment", "kubernetes", "docker", "podman"]
    },
    {
      "name": "security-dev",
      "description": "Security analysis, penetration testing, and container vulnerability scanning toolkit",
      "category": "domain",
      "tools": ["trivy", "dive", "bandwhich"],
      "system_packages": ["nmap", "tcpdump", "wireshark-cli", "netstat", "ss", "dig", "nslookup", "ping", "traceroute", "iperf3", "mtr", "whois"],
      "package_managers": {
        "apt": ["nmap", "tcpdump", "tshark", "net-tools", "dnsutils", "iputils-ping", "traceroute", "iperf3", "mtr", "whois", "nikto", "sqlmap", "hydra"],
        "yum": ["nmap", "tcpdump", "wireshark", "net-tools", "bind-utils", "iputils", "traceroute", "iperf3", "mtr", "whois"],
        "dnf": ["nmap", "tcpdump", "wireshark-cli", "net-tools", "bind-utils", "iputils", "traceroute", "iperf3", "mtr", "whois"]
      },
      "post_install": [
        "echo '🛡️  Security research toolkit ready:'",
        "echo '  🌐 Network: nmap, tcpdump, wireshark, mtr'",
        "echo '  🐳 Container Security: trivy (vulnerability scanning)'",
        "echo '  🔍 Container Analysis: dive (image inspection)'",
        "echo '  📡 Network Monitoring: bandwhich (bandwidth)'",
        "echo '  🕷️  Web: nikto, sqlmap, hydra (apt-based systems)'",
        "echo ''",
        "echo 'Container security commands:'",
        "echo '  trivy image <image>    # Scan container for vulnerabilities'",
        "echo '  trivy fs <path>        # Scan filesystem for issues'",
        "echo '  dive <image>           # Analyze image layers for secrets'"
      ],
      "includes_bundles": ["advanced"],
      "tags": ["domain", "security", "penetration-testing", "vulnerability-scanning", "network-analysis", "container-security"]
    },
    {
      "name": "game-dev",
      "description": "Game development environment with graphics and engine tools",
      "category": "domain",
      "tools": ["ffmpeg", "imagemagick"],
      "system_packages": [],
      "package_managers": {
        "apt": ["blender", "gimp", "audacity"],
        "yum": ["blender", "gimp", "audacity"],
        "dnf": ["blender", "gimp", "audacity"]
      },
      "includes_bundles": ["intermediate"],
      "tags": ["domain", "game-development", "graphics", "3d", "audio", "engine"]
    },
    {
      "name": "serverless-dev",
      "description": "Serverless and edge computing development environment",
      "category": "domain",
      "tools": ["aws-cli"],
      "system_packages": [],
      "package_managers": {
        "apt": [],
        "yum": [],
        "dnf": []
      },
      "post_install": [
        "npm install -g serverless",
        "npm install -g @vercel/cli",
        "npm install -g netlify-cli",
        "npm install -g aws-cdk",
        "npm install -g @pulumi/cli",
        "echo ''",
        "echo '☁️ Serverless development environment ready!'",
        "echo '   🚀 Deployment: Serverless Framework, Vercel CLI, Netlify CLI'",
        "echo '   🏗️  Infrastructure: AWS CDK, Pulumi'",
        "echo '   ☁️  Cloud: AWS CLI v2 for Lambda and edge functions'",
        "echo ''",
        "echo '🚀 Quick start:'",
        "echo '   serverless create --template aws-nodejs          # AWS Lambda function'",
        "echo '   vercel                                           # Deploy to Vercel'",
        "echo '   netlify deploy                                   # Deploy to Netlify'",
        "echo '   cdk init app --language typescript              # AWS CDK project'"
      ],
      "includes_bundles": ["nodejs-dev"],
      "tags": ["domain", "serverless", "edge-computing", "lambda", "functions", "cloud", "jamstack"]
    },
    {
      "name": "microservices-dev",
      "description": "Microservices and distributed systems development environment",
      "category": "domain",
      "tools": ["jq"],
      "system_packages": [],
      "package_managers": {
        "apt": [],
        "yum": [],
        "dnf": []
      },
      "post_install": [
        "curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/ || true",
        "curl -fsSL https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar -xz && sudo mv linux-amd64/helm /usr/local/bin/ || true",
        "curl -L https://istio.io/downloadIstio | sh - || true",
        "curl -sL https://run.linkerd.io/install | sh || true",
        "echo ''",
        "echo '🕸️  Microservices development environment ready!'",
        "echo '   ☸️  Orchestration: Kubernetes (kubectl), Helm'",
        "echo '   🌐 Service Mesh: Istio, Linkerd'",
        "echo '   🔧 Data: jq for JSON processing'",
        "echo '   🐳 Containers: Docker for service containerization'",
        "echo ''",
        "echo '🚀 Quick start:'",
        "echo '   kubectl version                    # Check Kubernetes'",
        "echo '   helm create my-service            # Create Helm chart'",
        "echo '   istioctl version                  # Check Istio'",
        "echo '   linkerd check --pre               # Verify Linkerd prerequisites'"
      ],
      "includes_bundles": ["docker", "intermediate"],
      "tags": ["domain", "microservices", "kubernetes", "service-mesh", "distributed-systems", "containers"]
    },
    {
      "name": "python-dev",
      "description": "Complete Python development environment with modern tooling",
      "category": "language",
      "tools": ["uv", "ruff"],
      "system_packages": ["python3", "python3-pip", "python3-venv", "python3-dev", "pipx"],
      "package_managers": {
        "apt": ["python3", "python3-pip", "python3-venv", "python3-dev", "pipx"],
        "yum": ["python3", "python3-pip", "python3-devel", "python3-pipx"],
        "dnf": ["python3", "python3-pip", "python3-devel", "pipx"]
      },
      "post_install": [
        "pipx ensurepath",
        "pipx install black",
        "pipx install flake8", 
        "pipx install mypy",
        "pipx install poetry",
        "pipx install pre-commit",
        "pipx install pytest",
        "pipx install ipython",
        "echo ''",
        "echo '🐍 Python ecosystem ready!'",
        "echo '   📦 Package management: uv (fastest), poetry (full-featured)'",
        "echo '   🔍 Code quality: ruff (linting), black (formatting), mypy (typing)'",
        "echo '   🧪 Testing: pytest'",
        "echo '   📓 Interactive: ipython'",
        "echo '   🔄 Workflow: pre-commit hooks'",
        "echo ''",
        "echo '🚀 Quick start:'",
        "echo '   uv init myproject     # Create new project'",
        "echo '   cd myproject && uv add requests  # Add dependencies'",
        "echo '   uv run python main.py # Run with dependencies'"
      ],
      "includes_bundles": ["essential"],
      "tags": ["language", "python", "development", "data-science", "web", "ml"]
    },
    {
      "name": "nodejs-dev",
      "description": "Complete Node.js development environment with TypeScript and modern tooling",
      "category": "language",
      "tools": [],
      "system_packages": ["nodejs", "npm"],
      "package_managers": {
        "apt": ["nodejs", "npm"],
        "yum": ["nodejs", "npm"],
        "dnf": ["nodejs", "npm"]
      },
      "post_install": [
        "npm install -g typescript",
        "npm install -g ts-node",
        "npm install -g eslint",
        "npm install -g prettier",
        "npm install -g yarn",
        "npm install -g pnpm",
        "npm install -g nodemon",
        "npm install -g jest",
        "echo ''",
        "echo '⚡ Node.js ecosystem ready!'",
        "echo '   📦 Package managers: npm, yarn, pnpm'",
        "echo '   🔧 TypeScript: typescript, ts-node'",
        "echo '   🎨 Code quality: eslint, prettier'",
        "echo '   🧪 Testing: jest'",
        "echo '   🔥 Development: nodemon'",
        "echo ''",
        "echo '🚀 Quick start:'",
        "echo '   npm init -y && npm install express'",
        "echo '   tsc --init  # TypeScript project'"
      ],
      "includes_bundles": ["essential"],
      "tags": ["language", "nodejs", "javascript", "typescript", "web", "frontend"]
    },
    {
      "name": "go-dev",
      "description": "Complete Go development environment with essential tools",
      "category": "language",
      "tools": [],
      "system_packages": ["golang-go"],
      "package_managers": {
        "apt": ["golang-go"],
        "yum": ["golang"],
        "dnf": ["golang"]
      },
      "post_install": [
        "go install golang.org/x/tools/gopls@latest",
        "go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest",
        "go install github.com/air-verse/air@latest",
        "go install honnef.co/go/tools/cmd/staticcheck@latest",
        "go install github.com/spf13/cobra-cli@latest",
        "go install github.com/go-delve/delve/cmd/dlv@latest",
        "go install github.com/goreleaser/goreleaser@latest"
      ],
      "includes_bundles": ["essential"],
      "tags": ["language", "go", "golang", "development", "backend", "cli"]
    },
    {
      "name": "rust-dev",
      "description": "Complete Rust development environment with cargo ecosystem",
      "category": "language",
      "tools": [],
      "system_packages": ["rustc", "cargo"],
      "package_managers": {
        "apt": ["rustc", "cargo"],
        "yum": ["rust", "cargo"],
        "dnf": ["rust", "cargo"]
      },
      "post_install": [
        "rustup component add rustfmt",
        "rustup component add clippy",
        "rustup component add rust-analyzer",
        "cargo install cargo-watch",
        "cargo install cargo-edit",
        "cargo install cargo-audit",
        "cargo install cargo-outdated",
        "cargo install sccache",
        "cargo install cargo-expand",
        "cargo install cargo-nextest"
      ],
      "includes_bundles": ["essential"],
      "tags": ["language", "rust", "development", "performance", "systems", "cli"]
    },
    {
      "name": "java-dev",
      "description": "Complete Java development environment with Maven and Gradle",
      "category": "language",
      "tools": [],
      "system_packages": ["openjdk-17-jdk", "maven", "gradle"],
      "package_managers": {
        "apt": ["openjdk-17-jdk", "maven", "gradle"],
        "yum": ["java-17-openjdk-devel", "maven", "gradle"],
        "dnf": ["java-17-openjdk-devel", "maven", "gradle"]
      },
      "post_install": [
        "update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java || true",
        "echo 'export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64' >> ~/.bashrc"
      ],
      "includes_bundles": ["essential"],
      "tags": ["language", "java", "development", "enterprise", "jvm", "maven", "gradle"]
    },
    {
      "name": "ruby-dev",
      "description": "Complete Ruby development environment with rbenv and gems",
      "category": "language",
      "tools": [],
      "system_packages": ["ruby", "ruby-dev", "bundler"],
      "package_managers": {
        "apt": ["ruby", "ruby-dev", "bundler", "libssl-dev", "zlib1g-dev", "bison", "libffi-dev", "libyaml-dev"],
        "yum": ["ruby", "ruby-devel", "bundler", "openssl-devel", "zlib-devel", "bison", "libffi-devel", "libyaml-devel"],
        "dnf": ["ruby", "ruby-devel", "bundler", "openssl-devel", "zlib-devel", "bison", "libffi-devel", "libyaml-devel"]
      },
      "post_install": [
        "gem install rails",
        "gem install rspec",
        "gem install rubocop",
        "gem install bundler-audit",
        "gem install solargraph",
        "gem install pry",
        "gem install minitest"
      ],
      "includes_bundles": ["essential"],
      "tags": ["language", "ruby", "development", "web", "rails", "gem"]
    },
    {
      "name": "cpp-dev",
      "description": "Complete C/C++ development environment with modern tooling",
      "category": "language",
      "tools": [],
      "system_packages": ["gcc", "g++", "clang", "make", "cmake", "ninja-build", "gdb", "valgrind"],
      "package_managers": {
        "apt": ["gcc", "g++", "clang", "make", "cmake", "ninja-build", "gdb", "valgrind", "pkg-config", "autoconf", "automake", "libtool", "clang-format", "clang-tidy"],
        "yum": ["gcc", "gcc-c++", "clang", "make", "cmake", "ninja-build", "gdb", "valgrind", "pkgconfig", "autoconf", "automake", "libtool"],
        "dnf": ["gcc", "gcc-c++", "clang", "make", "cmake", "ninja-build", "gdb", "valgrind", "pkgconfig", "autoconf", "automake", "libtool", "clang-tools-extra"]
      },
      "post_install": [
        "pip3 install conan || true",
        "curl -sSL https://github.com/microsoft/vcpkg/archive/master.tar.gz | tar -xz -C /opt && mv /opt/vcpkg-master /opt/vcpkg || true"
      ],
      "includes_bundles": ["essential"],
      "tags": ["language", "cpp", "c", "development", "systems", "performance", "native"]
    },
    {
      "name": "php-dev",
      "description": "Complete PHP development environment with modern tooling",
      "category": "language",
      "tools": [],
      "system_packages": ["php", "php-cli", "php-fpm", "php-mysql", "php-pgsql", "php-sqlite3", "php-curl", "php-gd", "php-mbstring", "php-xml", "php-zip", "composer"],
      "package_managers": {
        "apt": ["php", "php-cli", "php-fpm", "php-mysql", "php-pgsql", "php-sqlite3", "php-curl", "php-gd", "php-mbstring", "php-xml", "php-zip", "composer"],
        "yum": ["php", "php-cli", "php-fpm", "php-mysqlnd", "php-pgsql", "php-sqlite3", "php-curl", "php-gd", "php-mbstring", "php-xml", "php-zip", "composer"],
        "dnf": ["php", "php-cli", "php-fpm", "php-mysqlnd", "php-pgsql", "php-sqlite3", "php-curl", "php-gd", "php-mbstring", "php-xml", "php-zip", "composer"]
      },
      "post_install": [
        "composer global require phpstan/phpstan",
        "composer global require squizlabs/php_codesniffer",
        "composer global require friendsofphp/php-cs-fixer",
        "composer global require phpunit/phpunit",
        "composer global require laravel/installer",
        "composer global require symfony/cli",
        "echo ''",
        "echo '🐘 PHP ecosystem ready!'",
        "echo '   📦 Package manager: Composer'",
        "echo '   🔍 Code quality: PHPStan, PHP_CodeSniffer, PHP-CS-Fixer'",
        "echo '   🧪 Testing: PHPUnit'",
        "echo '   🚀 Frameworks: Laravel installer, Symfony CLI'",
        "echo '   🗄️  Database: MySQL, PostgreSQL, SQLite support'",
        "echo ''",
        "echo '🚀 Quick start:'",
        "echo '   composer create-project laravel/laravel my-app  # Laravel project'",
        "echo '   symfony new my-symfony-app                      # Symfony project'",
        "echo '   phpunit --version                               # Test framework'"
      ],
      "includes_bundles": ["essential"],
      "tags": ["language", "php", "development", "web", "laravel", "symfony", "wordpress"]
    },
    {
      "name": "dotnet-dev",
      "description": "Complete .NET development environment with modern tooling",
      "category": "language",
      "tools": [],
      "system_packages": [],
      "package_managers": {
        "apt": [],
        "yum": [],
        "dnf": []
      },
      "pre_install": [
        "echo '🔵 Installing .NET from Microsoft repository...'",
        "wget https://packages.microsoft.com/config/debian/12/packages-microsoft-prod.deb -O packages-microsoft-prod.deb",
        "dpkg -i packages-microsoft-prod.deb",
        "rm packages-microsoft-prod.deb",
        "apt-get update"
      ],
      "custom_packages": {
        "apt": ["dotnet-sdk-8.0", "aspnetcore-runtime-8.0"],
        "yum": ["dotnet-sdk-8.0", "aspnetcore-runtime-8.0"],
        "dnf": ["dotnet-sdk-8.0", "aspnetcore-runtime-8.0"]
      },
      "post_install": [
        "dotnet tool install -g dotnet-ef",
        "dotnet tool install -g Microsoft.Web.LibraryManager.Cli",
        "dotnet tool install -g dotnet-aspnet-codegenerator",
        "dotnet tool install -g Microsoft.dotnet-httprepl",
        "echo ''",
        "echo '🔵 .NET ecosystem ready!'",
        "echo '   📦 .NET 8.0 SDK and ASP.NET Core Runtime'",
        "echo '   🛠️  Tools: Entity Framework, LibMan, Code Generator, HTTP REPL'",
        "echo '   🌐 Web: ASP.NET Core, Blazor, Web API'",
        "echo '   🖥️  Desktop: WPF, WinUI, MAUI'",
        "echo '   📱 Mobile: .NET MAUI (cross-platform)'",
        "echo ''",
        "echo '🚀 Quick start:'",
        "echo '   dotnet new webapi -n MyApi              # Web API project'",
        "echo '   dotnet new blazorserver -n MyBlazorApp  # Blazor Server app'",
        "echo '   dotnet new console -n MyConsoleApp      # Console application'",
        "echo '   dotnet new maui -n MyMauiApp            # MAUI cross-platform app'"
      ],
      "includes_bundles": ["essential"],
      "tags": ["language", "dotnet", "csharp", "development", "enterprise", "web", "mobile", "desktop"]
    },
    {
      "name": "debugging-tools",
      "description": "Profilers, memory analyzers, and network debugging tools",
      "category": "workflow",
      "tools": ["bottom", "procs", "bandwhich", "hyperfine"],
      "system_packages": ["gdb", "valgrind", "strace", "ltrace"],
      "package_managers": {
        "apt": ["gdb", "valgrind", "strace", "ltrace", "perf-tools-unstable"],
        "yum": ["gdb", "valgrind", "strace", "ltrace", "perf"],
        "dnf": ["gdb", "valgrind", "strace", "ltrace", "perf"]
      },
      "includes_bundles": ["essential"],
      "tags": ["workflow", "debugging", "profiling", "memory", "performance", "network"]
    },
    {
      "name": "deployment-tools",
      "description": "CI/CD, containers, and cloud deployment tools with security scanning",
      "category": "workflow",
      "tools": ["trivy", "hadolint"],
      "includes_bundles": ["docker", "essential"],
      "post_install": [
        "curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/ || true",
        "curl -fsSL https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar -xz && sudo mv linux-amd64/helm /usr/local/bin/ || true",
        "echo 'Deployment toolkit with security ready:'",
        "echo '  🐳 Docker CE + Compose v2 for containerization'",
        "echo '  ☸️  Kubernetes: kubectl + helm'",
        "echo '  🛡️  Security: trivy vulnerability scanning'",
        "echo '  ✅ Quality: hadolint Dockerfile linting'",
        "echo ''",
        "echo 'Secure deployment workflow:'",
        "echo '  1. hadolint Dockerfile    # Lint before build'",
        "echo '  2. docker build -t app .'",
        "echo '  3. trivy image app        # Security scan'",
        "echo '  4. kubectl apply -f k8s/  # Deploy if secure'"
      ],
      "tags": ["workflow", "deployment", "ci-cd", "containers", "kubernetes", "helm", "security"]
    },
    {
      "name": "code-review-tools",
      "description": "Code linting, formatting, and analysis tools (cross-language)",
      "category": "workflow",
      "tools": ["sd", "difftastic", "tokei", "delta", "lazygit", "gh"],
      "includes_bundles": ["essential"],
      "tags": ["workflow", "code-review", "linting", "formatting", "analysis", "quality"]
    },
    {
      "name": "ai-tools",
      "description": "AI-powered coding assistance and semantic code analysis tools",
      "category": "workflow",
      "tools": ["serena", "aider", "mise", "just"],
      "post_install": [
        "echo 'AI coding tools installed:'",
        "echo '  🤖 Serena MCP server: configure with your preferred AI assistant (Claude, etc.)'",
        "echo '  🧠 Aider: AI pair programming in terminal'",
        "echo '  🔧 mise: Multi-language version manager'",
        "echo '  ⚡ just: Modern command runner'",
        "echo 'See https://github.com/oraios/serena for Serena integration'",
        "echo 'See https://github.com/paul-gauthier/aider for Aider setup'"
      ],
      "includes_bundles": ["essential"],
      "tags": ["workflow", "ai", "coding-agent", "semantic-analysis", "mcp", "assistant", "llm"]
    },
    {
      "name": "docker",
      "description": "Complete Docker development environment with security and analysis tools (2024 best practice)",
      "category": "infrastructure",
      "tools": ["dive", "trivy", "lazydocker", "hadolint", "ctop"],
      "system_packages": [],
      "package_managers": {
        "apt": [],
        "yum": [],
        "dnf": []
      },
      "pre_install": [
        "echo '🐳 Installing Docker CE from official repository (2024 best practice)...'",
        "echo '⚠️  Removing old Docker packages...'",
        "apt-get purge -y docker docker.io docker-engine containerd runc 2>/dev/null || true",
        "echo '🔑 Adding Docker official GPG key...'",
        "install -d -m0755 /etc/apt/keyrings",
        "curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg",
        "chmod a+r /etc/apt/keyrings/docker.gpg",
        "echo '📦 Adding Docker official repository...'",
        "echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable\" > /etc/apt/sources.list.d/docker.list",
        "apt-get update"
      ],
      "custom_packages": {
        "apt": ["docker-ce", "docker-ce-cli", "containerd.io"],
        "yum": ["docker-ce", "docker-ce-cli", "containerd.io"],
        "dnf": ["docker-ce", "docker-ce-cli", "containerd.io"]
      },
      "post_install": [
        "echo '🚀 Configuring Docker service...'",
        "systemctl enable docker",
        "systemctl start docker",
        "echo '👥 Setting up Docker user permissions...'",
        "groupadd -f docker",
        "usermod -aG docker $USER 2>/dev/null || usermod -aG docker $(whoami) 2>/dev/null || true",
        "echo '✅ Complete Docker development environment installed!'",
        "echo ''",
        "echo '📦 Core Docker:'",
        "echo '  🐳 docker-ce: Latest Docker Engine from official repository'",
        "echo '  🔧 docker-ce-cli: Command-line interface (includes compose v2)'",
        "echo '  📦 containerd.io: Container runtime'",
        "echo '  🏗️  Docker Compose v2: Built-in with Docker CE (2024+)'",
        "echo '  🔨 BuildX: Advanced build features (included)'",
        "echo ''",
        "echo '🔍 Development Tools:'",
        "echo '  🔍 dive: Docker image layer analysis'",
        "echo '  🛡️  trivy: Container vulnerability scanning'",
        "echo '  🖥️  lazydocker: Docker TUI interface'",
        "echo '  📊 ctop: Container monitoring'",
        "echo '  ✅ hadolint: Dockerfile linting'",
        "echo ''",
        "echo '🔧 Commands available:'",
        "echo '  docker version           # Check Docker installation'",
        "echo '  docker compose version   # Check Compose v2 (no hyphen)'",
        "echo '  dive <image>            # Analyze image layers'",
        "echo '  trivy image <image>     # Security scan'",
        "echo '  lazydocker              # Docker TUI'",
        "echo '  ctop                    # Container monitoring'",
        "echo '  hadolint Dockerfile     # Lint Dockerfile'",
        "echo ''",
        "echo '⚠️  IMPORTANT: Log out and back in for Docker group permissions to take effect!'",
        "echo '    Or run: newgrp docker'"
      ],
      "includes_bundles": ["essential"],
      "tags": ["infrastructure", "docker", "containers", "development", "security", "analysis", "2024", "best-practice"]
    },
    {
      "name": "docker-rootless",
      "description": "Docker CE with rootless mode (maximum security - 2024 best practice)",
      "category": "infrastructure",
      "tools": ["dive", "trivy"],
      "system_packages": [],
      "package_managers": {
        "apt": ["uidmap", "dbus-user-session"],
        "yum": ["shadow-utils", "dbus"],
        "dnf": ["shadow-utils", "dbus"]
      },
      "pre_install": [
        "echo '🛡️  Installing Docker in rootless mode (maximum security)...'",
        "echo '📋 Installing prerequisites...'",
        "systemctl --user enable --now dbus 2>/dev/null || true"
      ],
      "custom_install": [
        "echo '📦 Installing Docker rootless...'",
        "curl -fsSL https://get.docker.com/rootless | sh",
        "echo '⚙️  Configuring environment...'",
        "echo 'export PATH=/usr/bin:$PATH' >> ~/.bashrc",
        "echo 'export DOCKER_HOST=unix:///run/user/$(id -u)/docker.sock' >> ~/.bashrc",
        "mkdir -p ~/.config/systemd/user",
        "systemctl --user enable docker 2>/dev/null || true",
        "systemctl --user start docker 2>/dev/null || true"
      ],
      "post_install": [
        "echo '✅ Docker rootless installation complete!'",
        "echo ''",
        "echo '🛡️  Security Benefits:'",
        "echo '  ✓ Docker daemon runs as non-root user'",
        "echo '  ✓ Containers cannot escalate to root privileges'",
        "echo '  ✓ Reduced attack surface'",
        "echo '  ✓ No sudo required for Docker commands'",
        "echo ''",
        "echo '🔧 Rootless Docker is configured with:'",
        "echo '  🔍 dive: Docker image layer analysis'",
        "echo '  🛡️  trivy: Container vulnerability scanning'",
        "echo ''",
        "echo '📋 Commands:'",
        "echo '  docker version           # Check rootless Docker'",
        "echo '  docker run hello-world   # Test installation'",
        "echo '  dive <image>            # Analyze image layers'",
        "echo '  trivy image <image>     # Security scan'"
      ],
      "includes_bundles": ["essential"],
      "tags": ["infrastructure", "docker", "rootless", "security", "containers", "2024", "maximum-security"]
    },
    {
      "name": "cloud-tools",
      "description": "Cloud platform CLI tools (AWS, Azure, GCP)",
      "category": "infrastructure",
      "tools": ["aws-cli"],
      "post_install": [
        "echo '☁️  Cloud tools installed successfully!'",
        "echo ''",
        "echo '🔧 Available cloud CLIs:'",
        "echo '  aws --version        # AWS CLI v2'",
        "echo ''",
        "echo '⚙️  Configuration:'",
        "echo '  aws configure        # Set up AWS credentials'",
        "echo '  aws sts get-caller-identity  # Test AWS access'",
        "echo ''",
        "echo '📚 Quick start:'",
        "echo '  aws s3 ls           # List S3 buckets'",
        "echo '  aws ec2 describe-instances  # List EC2 instances'"
      ],
      "includes_bundles": ["essential"],
      "tags": ["infrastructure", "cloud", "aws", "cli", "devops"]
    },
    {
      "name": "editors",
      "description": "Modern text editors and IDEs",
      "category": "infrastructure", 
      "tools": ["neovim"],
      "post_install": [
        "echo '📝 Editors installed successfully!'",
        "echo ''",
        "echo '🔧 Available editors:'",
        "echo '  nvim --version      # Neovim (latest)'",
        "echo ''",
        "echo '⚙️  Configuration:'",
        "echo '  nvim                # Launch Neovim'",
        "echo '  :help               # Built-in help system'",
        "echo ''",
        "echo '🚀 Pro tips:'",
        "echo '  - Install a Neovim configuration like LazyVim or NvChad'",
        "echo '  - Use :Tutor for interactive Vim tutorial'",
        "echo '  - Configure with ~/.config/nvim/init.lua'"
      ],
      "includes_bundles": ["essential"],
      "tags": ["infrastructure", "editors", "neovim", "ide", "development", "vim"]
    },
    {
      "name": "database-dev",
      "description": "Modern database development, analysis, and administration tools",
      "category": "infrastructure",
      "tools": ["jq", "xsv"],
      "system_packages": ["postgresql-client", "mysql-client", "sqlite3"],
      "package_managers": {
        "apt": ["postgresql-client", "mysql-client", "sqlite3", "redis-tools"],
        "yum": ["postgresql", "mysql", "sqlite", "redis"],
        "dnf": ["postgresql", "mysql", "sqlite", "redis"]
      },
      "post_install": [
        "pipx install pgcli",
        "pipx install mycli", 
        "pipx install litecli",
        "pipx install sqlfluff",
        "pipx install dbt-core",
        "go install github.com/xo/usql@latest",
        "go install github.com/amacneil/dbmate@latest",
        "curl -sSf https://atlasgo.sh | sh || true",
        "npm install -g @dbml/cli",
        "curl -L https://github.com/k1LoW/tbls/releases/latest/download/tbls_linux_amd64.tar.gz | tar -xz && sudo mv tbls /usr/local/bin/ || true",
        "curl -L https://github.com/duckdb/duckdb/releases/latest/download/duckdb_cli-linux-amd64.zip -o duckdb.zip && unzip duckdb.zip && sudo mv duckdb /usr/local/bin/ && rm duckdb.zip || true",
        "echo ''",
        "echo '🗄️  Modern database development toolkit ready!'",
        "echo ''",
        "echo '🔧 Enhanced CLI Clients:'",
        "echo '   🐘 pgcli: PostgreSQL with auto-completion and syntax highlighting'",
        "echo '   🐬 mycli: MySQL with enhanced features and themes'", 
        "echo '   💎 litecli: SQLite with modern CLI experience'",
        "echo '   🌐 usql: Universal database CLI (supports 30+ databases)'",
        "echo ''",
        "echo '📊 Analysis & Performance:'",
        "echo '   🦆 duckdb: Fast analytical database engine'",
        "echo '   🔍 sqlfluff: SQL linting and formatting'",
        "echo '   🏗️  dbt: Modern data transformation tool'",
        "echo '   🔧 jq: JSON processing for database API responses'",
        "echo '   📋 xsv: CSV toolkit for data analysis'",
        "echo ''",
        "echo '🏗️  Schema & Migration:'",
        "echo '   🔄 dbmate: Simple database migrations'",
        "echo '   🗺️  atlas: Modern schema management and migrations'",
        "echo '   📚 tbls: Auto-generate schema documentation'",
        "echo '   📊 dbml: Database markup language for design'",
        "echo ''",
        "echo '🚀 Quick start:'",
        "echo '   pgcli postgresql://user:pass@host/db  # Enhanced PostgreSQL client'",
        "echo '   mycli mysql://user:pass@host/db       # Enhanced MySQL client'",
        "echo '   usql postgres://...                  # Universal database client'",
        "echo '   duckdb                               # Start analytical database'",
        "echo '   sqlfluff lint queries/               # Lint SQL files'",
        "echo '   dbmate new create_users_table        # Create new migration'",
        "echo '   tbls doc postgres://...              # Generate schema docs'",
        "echo ''",
        "echo '💡 Pro tips:'",
        "echo '   - Use pgcli/mycli for better interactive experience'",
        "echo '   - DuckDB excels at analytical workloads on CSV/Parquet'",
        "echo '   - sqlfluff enforces SQL style consistency'",
        "echo '   - tbls creates beautiful schema documentation automatically'"
      ],
      "includes_bundles": ["essential"],
      "tags": ["infrastructure", "database", "sql", "postgresql", "mysql", "sqlite", "analysis", "migration", "cli", "development"]
    },
    {
      "name": "network-tools",
      "description": "Network administration and monitoring toolkit",
      "category": "infrastructure",
      "tools": ["bandwhich", "jq"],
      "system_packages": ["nmap", "tcpdump", "wireshark-cli", "netstat", "ss", "dig", "nslookup", "ping", "traceroute", "iperf3", "mtr", "whois"],
      "package_managers": {
        "apt": ["nmap", "tcpdump", "tshark", "net-tools", "dnsutils", "iputils-ping", "traceroute", "iperf3", "mtr", "whois", "curl", "wget"],
        "yum": ["nmap", "tcpdump", "wireshark", "net-tools", "bind-utils", "iputils", "traceroute", "iperf3", "mtr", "whois", "curl", "wget"],
        "dnf": ["nmap", "tcpdump", "wireshark-cli", "net-tools", "bind-utils", "iputils", "traceroute", "iperf3", "mtr", "whois", "curl", "wget"]
      },
      "includes_bundles": ["essential"],
      "tags": ["infrastructure", "network", "monitoring", "security", "diagnostics", "performance"]
    },
    {
      "name": "monitoring-tools",
      "description": "Infrastructure monitoring, metrics, and alerting tools",
      "category": "infrastructure",
      "tools": ["bottom", "bandwhich", "procs"],
      "system_packages": [],
      "package_managers": {
        "apt": ["prometheus", "grafana", "alertmanager-prometheus"],
        "yum": ["prometheus", "grafana", "alertmanager"],
        "dnf": ["prometheus", "grafana", "alertmanager"]
      },
      "post_install": [
        "echo '📊 Infrastructure monitoring toolkit ready!'",
        "echo ''",
        "echo '🔧 System Monitoring:'",
        "echo '   📈 bottom: Beautiful system resource monitor'",
        "echo '   🌐 bandwhich: Network bandwidth by process'",
        "echo '   🔍 procs: Enhanced process information'",
        "echo ''",
        "echo '📊 Infrastructure Monitoring:'",
        "echo '   📈 Prometheus: Metrics collection and storage'",
        "echo '   📊 Grafana: Metrics visualization and dashboards'",
        "echo '   🚨 Alertmanager: Alert handling and routing'",
        "echo ''",
        "echo '🚀 Quick start:'",
        "echo '   btm                     # Launch system monitor'",
        "echo '   sudo bandwhich          # Network monitoring'",
        "echo '   procs                   # Enhanced process list'",
        "echo '   sudo systemctl start prometheus  # Start Prometheus'",
        "echo '   sudo systemctl start grafana-server  # Start Grafana'"
      ],
      "includes_bundles": ["essential"],
      "tags": ["infrastructure", "monitoring", "metrics", "alerting", "observability", "prometheus", "grafana"]
    },
    {
      "name": "testing-tools",
      "description": "Cross-language testing frameworks and quality assurance tools",
      "category": "infrastructure",
      "tools": ["hyperfine"],
      "system_packages": [],
      "package_managers": {
        "apt": ["curl", "wget"],
        "yum": ["curl", "wget"],
        "dnf": ["curl", "wget"]
      },
      "post_install": [
        "npm install -g jest",
        "npm install -g mocha",
        "npm install -g cypress",
        "npm install -g playwright",
        "npm install -g @storybook/cli",
        "pipx install pytest",
        "pipx install coverage",
        "pipx install tox",
        "pipx install selenium",
        "go install github.com/onsi/ginkgo/v2/ginkgo@latest",
        "go install github.com/onsi/gomega/...@latest",
        "cargo install cargo-nextest",
        "cargo install cargo-tarpaulin",
        "echo ''",
        "echo '🧪 Cross-language testing toolkit ready!'",
        "echo ''",
        "echo '🔧 Performance Testing:'",
        "echo '   ⚡ hyperfine: Command-line benchmarking'",
        "echo ''",
        "echo '⚡ JavaScript/Node.js Testing:'",
        "echo '   🧪 Jest: Modern JavaScript testing framework'",
        "echo '   🧪 Mocha: Flexible JavaScript test framework'",
        "echo '   🌐 Cypress: End-to-end web testing'",
        "echo '   🎭 Playwright: Cross-browser automation'",
        "echo '   📚 Storybook: Component testing and documentation'",
        "echo ''",
        "echo '🐍 Python Testing:'",
        "echo '   ✅ pytest: Modern Python testing framework'",
        "echo '   📊 coverage: Code coverage analysis'",
        "echo '   🔄 tox: Testing across Python versions'",
        "echo '   🌐 selenium: Web browser automation'",
        "echo ''",
        "echo '🦀 Rust Testing:'",
        "echo '   ⚡ cargo-nextest: Next-generation test runner'",
        "echo '   📊 cargo-tarpaulin: Code coverage for Rust'",
        "echo ''",
        "echo '🐹 Go Testing:'",
        "echo '   🧪 Ginkgo: BDD testing framework'",
        "echo '   ✅ Gomega: Matcher library for assertions'",
        "echo ''",
        "echo '🚀 Quick start:'",
        "echo '   jest --init                 # Initialize Jest for JS'",
        "echo '   pytest --version           # Check Python testing'",
        "echo '   cargo nextest run          # Run Rust tests'",
        "echo '   ginkgo version             # Check Go testing'",
        "echo '   hyperfine \"command\"        # Benchmark commands'"
      ],
      "includes_bundles": ["essential"],
      "tags": ["infrastructure", "testing", "qa", "quality-assurance", "frameworks", "coverage", "performance"]
    },
    {
      "name": "documentation-tools",
      "description": "Technical writing, documentation generation, and publishing tools",
      "category": "infrastructure",
      "tools": ["tealdeer"],
      "system_packages": ["pandoc", "texlive-latex-base", "texlive-fonts-recommended"],
      "package_managers": {
        "apt": ["pandoc", "texlive-latex-base", "texlive-fonts-recommended", "graphviz", "plantuml"],
        "yum": ["pandoc", "texlive", "graphviz", "plantuml"],
        "dnf": ["pandoc", "texlive", "graphviz", "plantuml"]
      },
      "post_install": [
        "npm install -g @vuepress/cli",
        "npm install -g vitepress",
        "npm install -g gitbook-cli",
        "npm install -g docsify-cli",
        "npm install -g jsdoc",
        "npm install -g typedoc",
        "pipx install mkdocs",
        "pipx install mkdocs-material",
        "pipx install sphinx",
        "pipx install pydoc-markdown",
        "go install github.com/gohugoio/hugo@latest",
        "cargo install mdbook",
        "cargo install mdbook-mermaid",
        "echo ''",
        "echo '📚 Technical documentation toolkit ready!'",
        "echo ''",
        "echo '📖 Documentation Generators:'",
        "echo '   📝 Hugo: Fast static site generator (Go)'",
        "echo '   📚 mdBook: Rust-based documentation (like Rust Book)'",
        "echo '   🐍 MkDocs: Python documentation with Material theme'",
        "echo '   🐍 Sphinx: Advanced Python documentation'",
        "echo '   📘 VuePress: Vue.js powered documentation'",
        "echo '   ⚡ VitePress: Fast Vue-based static site generator'",
        "echo '   📗 GitBook: Modern documentation platform'",
        "echo '   📄 Docsify: Simple documentation site generator'",
        "echo ''",
        "echo '🔧 Content Processing:'",
        "echo '   📄 Pandoc: Universal document converter'",
        "echo '   📊 PlantUML: UML diagram generation'",
        "echo '   🌐 Graphviz: Graph visualization'",
        "echo '   📊 Mermaid: Diagram and flowchart generation'",
        "echo '   📖 TeXLive: LaTeX document preparation'",
        "echo '   📚 tealdeer: Fast tldr client for quick help'",
        "echo ''",
        "echo '📋 API Documentation:'",
        "echo '   📝 JSDoc: JavaScript API documentation'",
        "echo '   📘 TypeDoc: TypeScript API documentation'",
        "echo '   🐍 pydoc-markdown: Python API docs to Markdown'",
        "echo ''",
        "echo '🚀 Quick start:'",
        "echo '   hugo new site my-docs      # Create Hugo site'",
        "echo '   mdbook init my-book        # Create mdBook'",
        "echo '   mkdocs new my-project      # Create MkDocs site'",
        "echo '   sphinx-quickstart          # Initialize Sphinx docs'",
        "echo '   vuepress create my-docs    # Create VuePress site'"
      ],
      "includes_bundles": ["essential"],
      "tags": ["infrastructure", "documentation", "technical-writing", "static-sites", "api-docs", "publishing"]
    },
    {
      "name": "multimedia-dev",
      "description": "Media processing and content creation development environment",
      "category": "domain",
      "tools": ["ffmpeg", "imagemagick", "7zip"],
      "includes_bundles": ["essential"],
      "tags": ["domain", "multimedia", "media", "video", "audio", "image", "compression", "content-creation"]
    },
    {
      "name": "blockchain-dev",
      "description": "Blockchain and Web3 development environment with smart contract tools",
      "category": "domain",
      "tools": ["jq"],
      "system_packages": [],
      "package_managers": {
        "apt": [],
        "yum": [],
        "dnf": []
      },
      "post_install": [
        "npm install -g truffle",
        "npm install -g @foundry-rs/foundry",
        "npm install -g hardhat",
        "npm install -g web3-cli",
        "npm install -g @ethereum/remix-ide",
        "curl -L https://foundry.paradigm.xyz | bash || true",
        "echo ''",
        "echo '⛓️  Blockchain development environment ready!'",
        "echo '   🔗 Smart Contracts: Truffle, Hardhat, Foundry'",
        "echo '   🌐 Web3: Web3 CLI, Remix IDE'",
        "echo '   💰 Ethereum: Full development stack'",
        "echo '   🔧 Data: jq for JSON-RPC processing'",
        "echo ''",
        "echo '🚀 Quick start:'",
        "echo '   truffle init                    # Create Truffle project'",
        "echo '   npx hardhat init               # Create Hardhat project'",
        "echo '   foundry init my-project        # Create Foundry project'",
        "echo '   remix-ide                      # Launch Remix IDE'"
      ],
      "includes_bundles": ["nodejs-dev"],
      "tags": ["domain", "blockchain", "web3", "ethereum", "smart-contracts", "defi", "crypto"]
    },
    {
      "name": "polyglot-dev",
      "description": "Multi-language development environment (Python + Node.js + Docker + Cloud + Editors)",
      "category": "language",
      "tools": [],
      "includes_bundles": [
        "system-foundation", 
        "python-dev", 
        "nodejs-dev",
        "docker",
        "cloud-tools",
        "editors"
      ],
      "post_install": [
        "echo ''",
        "echo '🎉 Development environment setup complete!'",
        "echo ''",
        "echo '📋 What was installed (complete professional development environment):'",
        "echo ''",
        "echo '🏗️  System Foundation:'",
        "echo '   ✅ Build tools, Git, debugging tools, shell environments'",
        "echo ''",
        "echo '🐍 Python Development:'",
        "echo '   ✅ Python 3 + pipx + professional tools (black, mypy, pytest)'",
        "echo '   ✅ Modern: uv (10-100x faster) + ruff (10-100x faster linting)'",
        "echo ''",
        "echo '⚡ Node.js Development:'",
        "echo '   ✅ Node.js LTS + TypeScript + ESLint + Prettier'",
        "echo ''",
        "echo '🐳 Container Development:'",
        "echo '   ✅ Docker CE (official repository) + Compose v2'",
        "echo ''",
        "echo '☁️  Cloud Tools:'",
        "echo '   ✅ AWS CLI v2 (latest binary installation)'",
        "echo ''",
        "echo '📝 Editors:'",
        "echo '   ✅ Neovim (latest official binary)'",
        "echo ''",
        "echo '⚠️  IMPORTANT: Log out and back in for all permissions to take effect'",
        "echo ''",
        "echo '🎯 Complete professional development environment ready!'",
        "echo '   Modern tooling + comprehensive language support + container development'"
      ],
      "tags": ["domain", "polyglot", "multi-language", "python", "nodejs", "comprehensive"]
    }
  ]
}