#!/bin/bash

# Gearbox - Essential Tools Installer
# Main command-line interface for installing development tools

set -e

# Find the script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source configuration
if [[ -f "$SCRIPT_DIR/config.sh" ]]; then
    source "$SCRIPT_DIR/config.sh"
else
    echo "Error: config.sh not found in $SCRIPT_DIR"
    exit 1
fi

# Show available tools
show_tools() {
    cat << EOF
Available Tools:

Core Development Tools:
  fd          Fast file finder (Rust)
              Alternative to 'find' with intuitive syntax and parallel search
              
  ripgrep     Fast text search (Rust)
              High-performance grep replacement with PCRE2 and multi-line support
              
  fzf         Fuzzy finder (Go)
              Interactive file/command finder with shell integration
              
  jq          JSON processor (C)
              Command-line JSON processor with powerful query capabilities

Navigation & File Management:
  zoxide      Smart cd command (Rust)
              Smarter directory navigation with frecency (frequency + recency)
              
  yazi        Terminal file manager (Rust)
              Fast terminal file manager with vim-like keybindings and preview
              
  fclones     Duplicate file finder (Rust)
              Efficient tool to find, remove, and deduplicate identical files
              
  serena      Coding agent toolkit (Python)
              Semantic retrieval and editing capabilities for codebases
              
  uv          Python package manager (Rust)
              Extremely fast Python package and project manager
              
  ruff        Python linter & formatter (Rust)
              10-100x faster than Flake8/Black, 800+ lint rules
              
  bat         Enhanced cat with syntax highlighting (Rust)
              Cat clone with wings - Git integration, themes, paging
              
  starship    Customizable shell prompt (Rust)
              Fast, minimal prompt with contextual information
              
  eza         Modern ls replacement (Rust)
              Enhanced file listings with Git integration and tree view
              
  delta       Syntax-highlighting pager (Rust)
              Enhanced Git diff and output with word-level highlighting
              
  lazygit     Terminal UI for Git (Go)
              Interactive Git operations with visual interface
              
  bottom      Cross-platform system monitor (Rust)
              Beautiful terminal-based system resource monitoring
              
  procs       Modern ps replacement (Rust)
              Enhanced process information with tree view and colors
              
  tokei       Code statistics tool (Rust)
              Fast line counting for 200+ programming languages
              
  difftastic  Structural diff tool (Rust)
              Syntax-aware diffing for better code change analysis
              
  bandwhich   Network bandwidth monitor (Rust)
              Terminal bandwidth utilization by process
              
  xsv         CSV data toolkit (Rust)
              Fast CSV processing and analysis
              
  hyperfine   Command-line benchmarking (Rust)
              Statistical analysis of command execution times
              
  gh          GitHub CLI (Go)
              Repository management, PRs, issues, and workflows
              
  dust        Better disk usage analyzer (Rust)
              Intuitive visualization of directory sizes
              
  sd          Find & replace CLI (Rust)
              Intuitive alternative to sed for text replacement
              
  tealdeer    Fast tldr client (Rust)
              Quick command help without full man pages
              
  choose      Cut/awk alternative (Rust)
              Human-friendly text column selection

Media & Image Processing:
  ffmpeg      Video/audio processing (C/C++)
              Comprehensive media processing suite with extensive codec support
              
  imagemagick Image manipulation (C/C++)
              Powerful image processing and manipulation toolkit
              
  7zip        Compression tool (C/C++)
              High-ratio compression tool with multiple format support

Usage Examples:
  gearbox install fd ripgrep fzf       # Install core development tools
  gearbox install ffmpeg               # Install just ffmpeg
  gearbox install --minimal fd ripgrep # Fast builds
  gearbox install --maximum ffmpeg     # Full-featured build

For detailed tool documentation, see: docs/USER_GUIDE.md

EOF
}

# Show help
show_help() {
    cat << EOF
Gearbox - Essential Tools Installer

Usage: gearbox [COMMAND] [OPTIONS] [TOOLS...]

Commands:
  install     Install tools (uses advanced orchestrator if available)
  list        Show available tools with descriptions  
  status      Show installation status of tools (requires orchestrator)
  verify      Verify tool installations (requires orchestrator)
  config      Manage configuration settings
  doctor      Run health checks and diagnostics
  help        Show this help message

Install Options:
  --minimal           Fast builds with essential features
  --maximum           Full-featured builds with all optimizations
  --skip-common-deps  Skip common dependency installation
  --run-tests         Run test suites for validation
  --no-shell          Skip shell integration setup (fzf)

Available Tools:
  fd          Fast file finder (Rust)
  ripgrep     Fast text search (Rust) 
  fzf         Fuzzy finder (Go)
  jq          JSON processor (C)
  zoxide      Smart cd command (Rust)
  yazi        Terminal file manager (Rust)
  fclones     Duplicate file finder (Rust)
  serena      Coding agent toolkit (Python)
  uv          Python package manager (Rust)
  ruff        Python linter & formatter (Rust)
  bat         Enhanced cat with syntax highlighting (Rust)
  starship    Customizable shell prompt (Rust)
  eza         Modern ls replacement (Rust)
  delta       Syntax-highlighting pager (Rust)
  lazygit     Terminal UI for Git (Go)
  bottom      Cross-platform system monitor (Rust)
  procs       Modern ps replacement (Rust)
  tokei       Code statistics tool (Rust)
  difftastic  Structural diff tool (Rust)
  bandwhich   Network bandwidth monitor (Rust)
  xsv         CSV data toolkit (Rust)
  hyperfine   Command-line benchmarking (Rust)
  gh          GitHub CLI (Go)
  dust        Better disk usage analyzer (Rust)
  sd          Find & replace CLI (Rust)
  tealdeer    Fast tldr client (Rust)
  choose      Cut/awk alternative (Rust)
  ffmpeg      Video/audio processing (C/C++)
  imagemagick Image manipulation (C/C++)
  7zip        Compression tool (C/C++)

Examples:
  gearbox list                         # Show available tools
  gearbox config show                  # Show current configuration
  gearbox config wizard                # Interactive configuration setup
  gearbox install fd ripgrep fzf       # Install specific tools (recommended)
  gearbox install                      # Install all tools (with confirmation)
  gearbox install --minimal fd ripgrep # Fast installation
  gearbox install --maximum ffmpeg     # Full-featured build

For detailed documentation, see:
  docs/USER_GUIDE.md      - Complete user guide
  docs/DEVELOPER_GUIDE.md - Technical documentation

EOF
}

# Parse command
COMMAND=""  # No default command - require explicit action
if [[ $# -gt 0 ]] && [[ ! "$1" =~ ^-- ]]; then
    case "$1" in
        install)
            COMMAND="install"
            shift
            ;;
        list|ls)
            # Use orchestrator if available for enhanced listing
            if [[ -f "$SCRIPT_DIR/bin/orchestrator" ]]; then
                exec "$SCRIPT_DIR/bin/orchestrator" list "$@"
            else
                show_tools
            fi
            exit 0
            ;;
        config)
            COMMAND="config"
            shift
            ;;
        doctor)
            COMMAND="doctor"
            shift
            ;;
        status)
            # New orchestrator-based status command
            if [[ -f "$SCRIPT_DIR/bin/orchestrator" ]]; then
                exec "$SCRIPT_DIR/bin/orchestrator" status "${@:2}"
            else
                echo "Error: Status command requires the advanced orchestrator"
                echo "Please rebuild the project or use 'gearbox doctor' for health checks"
                exit 1
            fi
            ;;
        verify)
            # New orchestrator-based verify command  
            if [[ -f "$SCRIPT_DIR/bin/orchestrator" ]]; then
                exec "$SCRIPT_DIR/bin/orchestrator" verify "${@:2}"
            else
                echo "Error: Verify command requires the advanced orchestrator"
                echo "Please rebuild the project or use 'gearbox doctor' for health checks"
                exit 1
            fi
            ;;
        help|--help|-h)
            show_help
            exit 0
            ;;
        *)
            # If first arg is not a known command and doesn't start with --, 
            # assume it's a tool name and use install command
            COMMAND="install"
            ;;
    esac
else
    # No arguments provided - show help instead of auto-installing everything
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi
fi

# Handle commands
case "$COMMAND" in
    install)
        # Check if orchestrator is available
        if [[ -f "$SCRIPT_DIR/bin/orchestrator" ]]; then
            # Use new Go orchestrator for better performance and features
            
            # Check if there are any tool names (non-flag arguments)
            has_tools=false
            for arg in "$@"; do
                if [[ ! "$arg" =~ ^-- ]]; then
                    has_tools=true
                    break
                fi
            done
            
            if [[ $# -eq 0 ]] || [[ "$has_tools" == "false" ]]; then
                # Installing all tools - show confirmation with orchestrator info
                echo "You're about to install ALL 30 tools using the advanced orchestrator:"
                echo ""
                echo "Features:"
                echo "  • Parallel installation with dependency resolution"
                echo "  • Real-time progress tracking and error reporting"
                echo "  • Optimized build order by language (Go → Rust → Python → C)"
                echo "  • Comprehensive verification and health checks"
                echo ""
                echo "This will:"
                echo "  • Take 30-60 minutes depending on your system"
                echo "  • Download and compile source code"
                echo "  • Install to /usr/local/bin/"
                echo "  • Require ~2GB of temporary build space"
                echo ""
                echo "Tip: Use 'gearbox list' to see available tools"
                echo "     Use 'gearbox install fd ripgrep fzf' for specific tools"
                echo ""
                read -p "Continue with advanced orchestrator installation? [y/N]: " -n 1 -r
                echo
                if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                    echo "Installation cancelled."
                    echo "Run 'gearbox list' to see available tools."
                    exit 0
                fi
                echo "Starting orchestrated installation..."
                echo
            fi
            
            # Map gearbox flags to orchestrator flags for backward compatibility
            mapped_args=()
            for arg in "$@"; do
                case "$arg" in
                    --minimal)
                        mapped_args+=("--build-type" "minimal")
                        ;;
                    --maximum)
                        mapped_args+=("--build-type" "maximum")
                        ;;
                    *)
                        mapped_args+=("$arg")
                        ;;
                esac
            done
            
            # Use the Go orchestrator with mapped arguments
            exec "$SCRIPT_DIR/bin/orchestrator" install "${mapped_args[@]}"
        else
            # Fallback to shell script (legacy mode)
            echo "Warning: Advanced orchestrator not available, using legacy installer"
            
            # Check if no tools specified (just "gearbox install" with no tool names)
            if [[ $# -eq 0 ]] || [[ "$1" =~ ^-- ]]; then
                # Installing all tools - show confirmation
                echo "You're about to install ALL 30 tools from source:"
                echo "  fd, ripgrep, fzf, jq, zoxide, yazi, fclones, uv, ruff, bat, starship, eza, delta, lazygit, bottom, procs, tokei, difftastic, bandwhich, xsv, hyperfine, gh, dust, sd, tealdeer, choose, serena, ffmpeg, imagemagick, 7zip"
                echo ""
                echo "This will:"
                echo "  • Take 30-60 minutes depending on your system"
                echo "  • Download and compile source code"
                echo "  • Install to /usr/local/bin/"
                echo "  • Require ~2GB of temporary build space"
                echo ""
                echo "Tip: Use 'gearbox list' to see available tools"
                echo "     Use 'gearbox install fd ripgrep fzf' for specific tools"
                echo ""
                read -p "Continue with full installation? [y/N]: " -n 1 -r
                echo
                if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                    echo "Installation cancelled."
                    echo "Run 'gearbox list' to see available tools."
                    exit 0
                fi
                echo "Starting full installation..."
                echo
            fi
            
            # Ensure we're in the build directory
            cd "$BUILD_DIR" || {
                error "Could not access build directory: $BUILD_DIR"
            }
            
            # Run the legacy shell installer
            exec "$SCRIPT_DIR/scripts/install-all-tools.sh" "$@"
        fi
        ;;
    config)
        # Load the configuration management library
        if [[ -f "$SCRIPT_DIR/lib/config.sh" ]]; then
            source "$SCRIPT_DIR/lib/config.sh"
            init_config
        else
            echo "Error: Configuration system not available"
            exit 1
        fi
        
        # Handle config subcommands
        case "${1:-show}" in
            show|display)
                show_config
                ;;
            set)
                if [[ $# -lt 3 ]]; then
                    echo "Usage: gearbox config set KEY VALUE"
                    echo "Example: gearbox config set DEFAULT_BUILD_TYPE maximum"
                    exit 1
                fi
                set_config "$2" "$3" && save_config
                ;;
            get)
                if [[ $# -lt 2 ]]; then
                    echo "Usage: gearbox config get KEY"
                    echo "Example: gearbox config get DEFAULT_BUILD_TYPE"
                    exit 1
                fi
                get_config "$2"
                ;;
            wizard|interactive)
                config_wizard
                ;;
            reset)
                reset_config "${2:-}"
                save_config
                ;;
            edit)
                "${EDITOR:-nano}" "$GEARBOX_CONFIG_FILE"
                ;;
            path)
                echo "$GEARBOX_CONFIG_FILE"
                ;;
            help)
                cat << EOF
Gearbox Configuration Commands:

  gearbox config show              Show current configuration
  gearbox config set KEY VALUE     Set a configuration value
  gearbox config get KEY           Get a configuration value
  gearbox config wizard            Interactive configuration wizard
  gearbox config reset [--force]   Reset to default values
  gearbox config edit              Edit configuration file directly
  gearbox config path              Show configuration file path
  gearbox config help              Show this help

Available configuration keys:
  DEFAULT_BUILD_TYPE       Default build type (minimal|standard|maximum)
  MAX_PARALLEL_JOBS        Maximum parallel jobs (auto|number)
  CACHE_ENABLED            Enable build caching (true|false)
  CACHE_MAX_AGE_DAYS       Cache retention in days (number)
  AUTO_UPDATE_REPOS        Auto-update Git repositories (true|false)
  INSTALL_MISSING_DEPS     Auto-install missing dependencies (true|false)
  SKIP_TESTS_BY_DEFAULT    Skip tests by default (true|false)
  VERBOSE_OUTPUT           Enable verbose output (true|false)
  SHELL_INTEGRATION        Enable shell integration for tools (true|false)
  BACKUP_BEFORE_INSTALL    Backup existing tools before install (true|false)

Examples:
  gearbox config show
  gearbox config set DEFAULT_BUILD_TYPE maximum
  gearbox config wizard
  gearbox config reset --force
EOF
                ;;
            *)
                echo "Unknown config command: $1"
                echo "Use 'gearbox config help' for available commands"
                exit 1
                ;;
        esac
        ;;
    doctor)
        # Load the health check system
        if [[ -f "$SCRIPT_DIR/lib/doctor.sh" ]]; then
            source "$SCRIPT_DIR/lib/doctor.sh"
        else
            echo "Error: Health check system not available"
            exit 1
        fi
        
        # Handle doctor subcommands
        case "${1:-all}" in
            all|check)
                run_health_check "all"
                ;;
            system)
                run_health_check "system"
                ;;
            tools)
                run_health_check "tools"
                ;;
            environment|env)
                run_health_check "environment"
                ;;
            permissions|perms)
                run_health_check "permissions"
                ;;
            configuration|config)
                run_health_check "configuration"
                ;;
            cache)
                run_health_check "cache"
                ;;
            dependencies|deps)
                run_health_check "dependencies"
                ;;
            help)
                cat << EOF
Gearbox Doctor - Health Check & Diagnostics

Usage: gearbox doctor [CATEGORY]

Categories:
  all             Run all health checks (default)
  system          Check system requirements
  tools           Check installed tools
  environment     Check environment variables
  permissions     Check file permissions
  configuration   Check configuration files
  cache           Check build cache status
  dependencies    Check system dependencies

Examples:
  gearbox doctor              # Run all checks
  gearbox doctor system       # Check only system requirements
  gearbox doctor tools        # Check only installed tools
  gearbox doctor env          # Check environment variables

Exit codes:
  0 - All checks passed (healthy)
  1 - Some warnings found
  2 - Critical issues found
EOF
                ;;
            *)
                echo "Unknown doctor command: $1"
                echo "Use 'gearbox doctor help' for available commands"
                exit 1
                ;;
        esac
        ;;
    *)
        error "Unknown command: $COMMAND. Use 'gearbox help' for usage information."
        ;;
esac