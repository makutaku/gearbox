#!/bin/bash

# {{.Tool.Name}} Installation Script for Debian Linux
# Generated by Gearbox Script Generator
# Automated clone, dependency installation, configuration, build, and install
# Usage: ./{{.ScriptName}} [OPTIONS]

set -e  # Exit on any error

# Find the script directory and load common library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_DIR="$(dirname "$SCRIPT_DIR")"

# Source common library for shared functions
if [[ -f "$REPO_DIR/scripts/lib/common.sh" ]]; then
    source "$REPO_DIR/scripts/lib/common.sh"
else
    echo "ERROR: common.sh not found in $REPO_DIR/scripts/lib/" >&2
    exit 1
fi

# Configuration
{{.Tool.Name|upper}}_DIR="{{.RepoName}}"
{{.Tool.Name|upper}}_REPO="{{.Tool.Repository}}"
{{if .Language.MinVersion}}{{.Tool.Language|upper}}_MIN_VERSION="{{.Language.MinVersion}}"{{end}}

# Default options
BUILD_TYPE="{{if .Tool.BuildTypes.standard}}standard{{else}}{{index .BuildTypes 0}}{{end}}"
MODE="install"         # config, build, install
SKIP_DEPS=false
RUN_TESTS=false
FORCE_INSTALL=false
{{if .HasShell}}ENABLE_SHELL=true{{end}}

# Show help
show_help() {
    cat << EOF
{{.Tool.Description}}

Usage: $0 [OPTIONS]

Build Types:{{range $buildType, $flag := .Tool.BuildTypes}}
  {{$flag|printf "%-20s"}} {{$buildType}} build{{end}}

Modes:
  -c, --config-only     Configure only (prepare build)
  -b, --build-only      Configure and build (no install)
  -i, --install         Configure, build, and install (default)

Options:
  --skip-deps          Skip dependency installation
  --run-tests          Run test suite after building
  --force              Force reinstallation if already installed{{if .HasShell}}
  --no-shell           Skip shell integration setup{{end}}
  -h, --help           Show this help message

Examples:
  $0                   # Default build and install
  $0 {{(index .Tool.BuildTypes "minimal")}} -c             # Minimal build, config only
  $0 {{(index .Tool.BuildTypes "maximum")}} --run-tests    # Full build with tests

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in{{range $buildType, $flag := .Tool.BuildTypes}}
        {{$flag}})
            BUILD_TYPE="{{$buildType}}"
            shift
            ;;{{end}}
        -c|--config-only)
            MODE="config"
            shift
            ;;
        -b|--build-only)
            MODE="build"
            shift
            ;;
        -i|--install)
            MODE="install"
            shift
            ;;
        --skip-deps)
            SKIP_DEPS=true
            shift
            ;;
        --run-tests)
            RUN_TESTS=true
            shift
            ;;
        --force)
            FORCE_INSTALL=true
            shift
            ;;{{if .HasShell}}
        --no-shell)
            ENABLE_SHELL=false
            shift
            ;;{{end}}
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Version comparison function
version_compare() {
    if [[ $1 == $2 ]]; then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        if [[ -z ${ver2[i]} ]]; then
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]})); then
            return 0
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]})); then
            return 1
        fi
    done
    return 0
}

# Install dependencies
install_dependencies() {
    if [[ "$SKIP_DEPS" == true ]]; then
        log "Skipping dependency installation as requested"
        return 0
    fi

    # Update package list
    log "Updating package list..."
    sudo apt update || error "Failed to update package list"

    # Install basic build tools
    log "Installing build tools..."
    sudo apt install -y \
        build-essential \
        git \
        curl \
        || error "Failed to install build tools"

{{if .Tool.BuildConfig.SystemDeps}}    # Install tool-specific system dependencies
    log "Installing {{.Tool.Name}} system dependencies..."
    sudo apt install -y \{{range .Tool.BuildConfig.SystemDeps}}
        {{.}} \{{end}}
        || warning "Some system dependencies may not be available"
{{end}}
    success "Dependencies installed successfully"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   error "This script should not be run as root for security reasons"
fi

log "Starting {{.Tool.Name}} $MODE process for Debian Linux"
log "Build type: $BUILD_TYPE"
log "Mode: $MODE"

# Handle {{.Tool.Name}} source code
if [[ -d "${{.Tool.Name|upper}}_DIR" ]]; then
    log "Found existing {{.Tool.Name}} directory: ${{.Tool.Name|upper}}_DIR"
    
    # Check if it's a git repository
    if [[ -d "${{.Tool.Name|upper}}_DIR/.git" ]]; then
        log "Existing directory is a git repository"
        
        # Check if it's the correct repository
        cd "${{.Tool.Name|upper}}_DIR"
        CURRENT_ORIGIN=$(git remote get-url origin 2>/dev/null || echo "")
        
        if [[ "$CURRENT_ORIGIN" == "${{.Tool.Name|upper}}_REPO" ]]; then
            log "Repository origin matches expected {{.Tool.Name}} repository"
            
            log "Pulling latest changes..."
            git pull origin main || git pull origin master || warning "Failed to pull latest changes"
            success "Repository updated successfully"
        else
            warning "Existing git repository has different origin: $CURRENT_ORIGIN"
            cd ..
            rm -rf "${{.Tool.Name|upper}}_DIR"
            log "Cloning {{.Tool.Name}} repository..."
            git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
            success "{{.Tool.Name}} repository cloned successfully"
        fi
        cd ..
    else
        warning "Directory exists but is not a git repository"
        rm -rf "${{.Tool.Name|upper}}_DIR"
        log "Cloning {{.Tool.Name}} repository..."
        git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
        success "{{.Tool.Name}} repository cloned successfully"
    fi
else
    log "Cloning {{.Tool.Name}} repository..."
    git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
    success "{{.Tool.Name}} repository cloned successfully"
fi

# Change to {{.Tool.Name}} directory
cd "${{.Tool.Name|upper}}_DIR"

# Install dependencies
install_dependencies

success "Configuration completed successfully"

# Exit if config-only mode
if [[ "$MODE" == "config" ]]; then
    success "Configuration completed. Run with --build-only or --install to continue."
    exit 0
fi

# Language-specific build section will be inserted here by language templates

# Verify installation
log "Verifying installation..."
# Force PATH update for verification
export PATH="{{.InstallPath}}:$PATH"
# Clear bash command hash table to ensure new binaries are used
hash -r
if command -v {{.Tool.BinaryName}} &> /dev/null; then
    success "{{.Tool.Name}} installation verified!"
    echo
    log "{{.Tool.Name}} version information:"
    {{.Tool.BinaryName}} {{if .Tool.TestCommand}}{{.Tool.TestCommand}}{{else}}--version{{end}}
    echo
    log "Build type: $BUILD_TYPE"
    log "Installation path: {{.InstallPath}}"
    echo
    success "{{.Tool.Name}} installation completed successfully!"
    log "You can now use the '{{.Tool.BinaryName}}' command"
    echo
    log "Installation paths:"
    log "  {{.Tool.BinaryName}}: $(which {{.Tool.BinaryName}})"
    echo
    log "Script completed in directory: $(pwd)"
else
    error "{{.Tool.Name}} installation verification failed - try restarting your shell or updating PATH"
fi