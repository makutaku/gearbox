#!/bin/bash

# {{.Tool.Name}} Installation Script for Debian Linux
# Generated by Gearbox Script Generator - C/C++ Template
# Automated clone, dependency installation, configuration, build, and install
# Usage: ./{{.ScriptName}} [OPTIONS]

set -e  # Exit on any error

# Find the script directory and load common library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_DIR="$(dirname "$SCRIPT_DIR")"

# Source common library for shared functions
if [[ -f "$REPO_DIR/lib/common.sh" ]]; then
    source "$REPO_DIR/lib/common.sh"
else
    echo "ERROR: common.sh not found in $REPO_DIR/lib/" >&2
    exit 1
fi

# Configuration
{{.Tool.Name|upper}}_DIR="{{.RepoName}}"
{{.Tool.Name|upper}}_REPO="{{.Tool.Repository}}"

# Default options
BUILD_TYPE="{{if .Tool.BuildTypes.standard}}standard{{else}}{{index .BuildTypes 0}}{{end}}"
MODE="install"         # config, build, install
SKIP_DEPS=false
RUN_TESTS=false
FORCE_INSTALL=false
PARALLEL_JOBS=$(get_optimal_jobs)

# Show help
show_help() {
    cat << EOF
{{.Tool.Description}}

Usage: $0 [OPTIONS]

Build Types:{{range $buildType, $flag := .Tool.BuildTypes}}
  {{$flag|printf "%-20s"}} {{$buildType}} build{{end}}

Modes:
  -c, --config-only     Configure only (prepare build)
  -b, --build-only      Configure and build (no install)
  -i, --install         Configure, build, and install (default)

Options:
  --skip-deps          Skip dependency installation
  --run-tests          Run test suite after building
  --force              Force reinstallation if already installed
  -j, --jobs N         Number of parallel jobs (default: auto-detect)
  -h, --help           Show this help message

Examples:
  $0                   # Default build and install
  $0 {{(index .Tool.BuildTypes "minimal")}} -c             # Minimal build, config only
  $0 {{(index .Tool.BuildTypes "maximum")}} --run-tests    # Full build with tests

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in{{range $buildType, $flag := .Tool.BuildTypes}}
        {{$flag}})
            BUILD_TYPE="{{$buildType}}"
            shift
            ;;{{end}}
        -c|--config-only)
            MODE="config"
            shift
            ;;
        -b|--build-only)
            MODE="build"
            shift
            ;;
        -i|--install)
            MODE="install"
            shift
            ;;
        --skip-deps)
            SKIP_DEPS=true
            shift
            ;;
        --run-tests)
            RUN_TESTS=true
            shift
            ;;
        --force)
            FORCE_INSTALL=true
            shift
            ;;
        -j|--jobs)
            PARALLEL_JOBS="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Get configure options based on build type
get_configure_options() {
    local options="--prefix={{.InstallPath}}"
    
    case $BUILD_TYPE in
        debug|minimal)
            options="$options --enable-debug --disable-optimization"
            ;;
        release|standard)
            options="$options --disable-debug --enable-optimization"
            ;;
        optimized|maximum)
            options="$options --disable-debug --enable-optimization --enable-all-features"
            ;;
        static)
            options="$options --disable-shared --enable-static"
            ;;
    esac
    
{{if eq .Tool.Name "ffmpeg"}}    # FFmpeg-specific options
    case $BUILD_TYPE in
        minimal)
            options="$options --disable-ffplay --disable-ffprobe --disable-doc"
            ;;
        maximum)
            options="$options --enable-gpl --enable-nonfree --enable-libx264 --enable-libx265 --enable-libvpx --enable-libmp3lame --enable-libopus --enable-libvorbis"
            ;;
    esac
{{end}}
{{if eq .Tool.Name "imagemagick"}}    # ImageMagick-specific options
    case $BUILD_TYPE in
        minimal)
            options="$options --without-perl --without-x"
            ;;
        maximum)
            options="$options --with-quantum-depth=16 --enable-hdri --with-modules"
            ;;
    esac
{{end}}
    
    echo "$options"
}

# Get make options based on build type
get_make_options() {
    local options="-j$PARALLEL_JOBS"
    
    case $BUILD_TYPE in
        debug|minimal)
            options="$options CFLAGS='-g -O0'"
            ;;
        release|standard)
            options="$options CFLAGS='-O2 -DNDEBUG'"
            ;;
        optimized|maximum)
            options="$options CFLAGS='-O3 -march=native -DNDEBUG'"
            ;;
        static)
            options="$options LDFLAGS='-static'"
            ;;
    esac
    
    echo "$options"
}

# Install dependencies
install_dependencies() {
    if [[ "$SKIP_DEPS" == true ]]; then
        log "Skipping dependency installation as requested"
        return 0
    fi

    # Update package list
    log "Updating package list..."
    sudo apt update || error "Failed to update package list"

    # Install basic build tools
    log "Installing build tools..."
    sudo apt install -y \
        build-essential \
        git \
        curl \
        wget \
        pkg-config \
        autoconf \
        automake \
        libtool \
        make \
        cmake \
        nasm \
        yasm \
        || error "Failed to install build tools"

{{if .Tool.BuildConfig.SystemDeps}}    # Install tool-specific system dependencies
    log "Installing {{.Tool.Name}} system dependencies..."
    sudo apt install -y \{{range .Tool.BuildConfig.SystemDeps}}
        {{.}} \{{end}}
        || warning "Some system dependencies may not be available"
{{end}}
{{if eq .Tool.Name "ffmpeg"}}    # FFmpeg-specific dependencies
    log "Installing FFmpeg dependencies..."
    sudo apt install -y \
        libx264-dev \
        libx265-dev \
        libvpx-dev \
        libmp3lame-dev \
        libopus-dev \
        libvorbis-dev \
        libtheora-dev \
        libspeex-dev \
        libass-dev \
        libfreetype6-dev \
        libgnutls28-dev \
        libsdl2-dev \
        || warning "Some FFmpeg dependencies may not be available"
{{end}}
{{if eq .Tool.Name "imagemagick"}}    # ImageMagick-specific dependencies
    log "Installing ImageMagick dependencies..."
    sudo apt install -y \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libgif-dev \
        libwebp-dev \
        libraw-dev \
        librsvg2-dev \
        libxml2-dev \
        libfontconfig1-dev \
        libfreetype6-dev \
        liblcms2-dev \
        || warning "Some ImageMagick dependencies may not be available"
{{end}}
{{if eq .Tool.Name "7zip"}}    # 7zip-specific dependencies
    log "Installing 7zip dependencies..."
    sudo apt install -y \
        libbz2-dev \
        liblzma-dev \
        zlib1g-dev \
        || warning "Some 7zip dependencies may not be available"
{{end}}

    success "Dependencies installed successfully"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   error "This script should not be run as root for security reasons"
fi

log "Starting {{.Tool.Name}} $MODE process for Debian Linux"
log "Build type: $BUILD_TYPE"
log "Mode: $MODE"
log "Parallel jobs: $PARALLEL_JOBS"

# Handle {{.Tool.Name}} source code
if [[ -d "${{.Tool.Name|upper}}_DIR" ]]; then
    log "Found existing {{.Tool.Name}} directory: ${{.Tool.Name|upper}}_DIR"
    
    # Check if it's a git repository
    if [[ -d "${{.Tool.Name|upper}}_DIR/.git" ]]; then
        log "Existing directory is a git repository"
        
        # Check if it's the correct repository
        cd "${{.Tool.Name|upper}}_DIR"
        CURRENT_ORIGIN=$(git remote get-url origin 2>/dev/null || echo "")
        
        if [[ "$CURRENT_ORIGIN" == "${{.Tool.Name|upper}}_REPO" ]]; then
            log "Repository origin matches expected {{.Tool.Name}} repository"
            
            log "Pulling latest changes..."
            git pull origin main || git pull origin master || warning "Failed to pull latest changes"
            success "Repository updated successfully"
        else
            warning "Existing git repository has different origin: $CURRENT_ORIGIN"
            cd ..
            rm -rf "${{.Tool.Name|upper}}_DIR"
            log "Cloning {{.Tool.Name}} repository..."
            git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
            cd "${{.Tool.Name|upper}}_DIR"
            success "{{.Tool.Name}} repository cloned successfully"
        fi
        cd ..
    else
        warning "Directory exists but is not a git repository"
        rm -rf "${{.Tool.Name|upper}}_DIR"
        log "Cloning {{.Tool.Name}} repository..."
        git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
        success "{{.Tool.Name}} repository cloned successfully"
    fi
else
    log "Cloning {{.Tool.Name}} repository..."
    git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
    success "{{.Tool.Name}} repository cloned successfully"
fi

# Change to {{.Tool.Name}} directory
cd "${{.Tool.Name|upper}}_DIR"

# Verify we're in the correct directory
if [[ ! -f "configure" && ! -f "configure.ac" && ! -f "Makefile" && ! -f "CMakeLists.txt" ]]; then
    error "Invalid {{.Tool.Name}} source directory - missing build configuration files"
fi

# Install dependencies
install_dependencies

# Clean previous build
log "Cleaning previous build files..."
make clean &>/dev/null || true
make distclean &>/dev/null || true

# Get build configuration
CONFIGURE_OPTIONS=$(get_configure_options)
MAKE_OPTIONS=$(get_make_options)

log "Configuring {{.Tool.Name}} with $BUILD_TYPE settings..."
log "Configure options: $CONFIGURE_OPTIONS"
log "Make options: $MAKE_OPTIONS"

# Run autogen/bootstrap if needed
if [[ -f "autogen.sh" ]]; then
    log "Running autogen.sh..."
    ./autogen.sh || error "Failed to run autogen.sh"
elif [[ -f "bootstrap" ]]; then
    log "Running bootstrap..."
    ./bootstrap || error "Failed to run bootstrap"
elif [[ -f "configure.ac" && ! -f "configure" ]]; then
    log "Running autoreconf..."
    autoreconf -fiv || error "Failed to run autoreconf"
fi

success "Configuration completed successfully"

# Exit if config-only mode
if [[ "$MODE" == "config" ]]; then
    success "Configuration completed. Run with --build-only or --install to continue."
    if [[ -f "configure" ]]; then
        success "Configure command would be: ./configure $CONFIGURE_OPTIONS"
    elif [[ -f "CMakeLists.txt" ]]; then
        success "Build command would be: cmake . && make $MAKE_OPTIONS"
    else
        success "Build command would be: make $MAKE_OPTIONS"
    fi
    exit 0
fi

# Configure the build
log "Configuring {{.Tool.Name}} build system..."

if [[ -f "configure" ]]; then
    configure_with_options "./configure" "$CONFIGURE_OPTIONS"
elif [[ -f "CMakeLists.txt" ]]; then
    log "Using CMake build system..."
    mkdir -p build
    cd build
    cmake .. -DCMAKE_INSTALL_PREFIX={{.InstallPath}} || error "Failed to configure with CMake"
    cd ..
else
    log "Using direct Makefile build"
fi

# Build {{.Tool.Name}}
log "Building {{.Tool.Name}} (this may take a while)..."

if [[ -d "build" ]]; then
    cd build
    build_with_options make "$MAKE_OPTIONS"
    cd ..
else
    build_with_options make "$MAKE_OPTIONS"
fi

success "Build completed successfully"

# Run tests if requested
if [[ "$RUN_TESTS" == true ]]; then
    log "Running test suite..."
    if [[ -d "build" ]]; then
        cd build
        make test || warning "Some tests failed, but continuing"
        cd ..
    else
        make test || make check || warning "Some tests failed, but continuing"
    fi
    success "Test suite completed"
fi

# Exit if build-only mode
if [[ "$MODE" == "build" ]]; then
    success "Build completed. Run with --install to install the binaries."
    exit 0
fi

# Install {{.Tool.Name}}
log "Installing {{.Tool.Name}}..."

# Get version for cache operations
version="unknown"
if command -v {{.Tool.BinaryName}} &> /dev/null; then
    version=$({{.Tool.BinaryName}} --version 2>/dev/null | head -1 | cut -d' ' -f2 2>/dev/null || echo "unknown")
fi

# Check if we can use cached installation
if is_cached "{{.Tool.Name}}" "$BUILD_TYPE" "$version"; then
    log "Found cached {{.Tool.Name}} build, using cached version..."
    if get_cached_binary "{{.Tool.Name}}" "$BUILD_TYPE" "$version" "{{.Tool.BinaryName}}"; then
        success "{{.Tool.Name}} installed from cache successfully"
    else
        warning "Failed to use cached binary, proceeding with fresh installation"
        if [[ -d "build" ]]; then
            cd build
            sudo make install || error "Failed to install {{.Tool.Name}}"
            cd ..
        else
            sudo make install || error "Failed to install {{.Tool.Name}}"
        fi
        
        # Cache the new installation - get fresh version after installation
        version=$({{.Tool.BinaryName}} --version 2>/dev/null | head -1 | cut -d' ' -f2 2>/dev/null || echo "unknown")
        cache_build "{{.Tool.Name}}" "$BUILD_TYPE" "$version" "{{.InstallPath}}/{{.Tool.BinaryName}}"
    fi
else
    if [[ -d "build" ]]; then
        cd build
        sudo make install || error "Failed to install {{.Tool.Name}}"
        cd ..
    else
        sudo make install || error "Failed to install {{.Tool.Name}}"
    fi
    
    # Cache the new installation - get fresh version after installation
    version=$({{.Tool.BinaryName}} --version 2>/dev/null | head -1 | cut -d' ' -f2 2>/dev/null || echo "unknown")
    cache_build "{{.Tool.Name}}" "$BUILD_TYPE" "$version" "{{.InstallPath}}/{{.Tool.BinaryName}}"
fi

# Update library cache
sudo ldconfig || warning "Failed to update library cache"

# Verify installation
log "Verifying installation..."
# Update PATH to include install location
export PATH="{{.InstallPath}}:$PATH"
# Clear bash command hash table
hash -r

if command -v {{.Tool.BinaryName}} &> /dev/null; then
    success "{{.Tool.Name}} installation verified!"
    echo
    log "{{.Tool.Name}} version information:"
    {{.Tool.BinaryName}} {{if .Tool.TestCommand}}{{.Tool.TestCommand}}{{else}}--version{{end}} || echo "Version command not available"
    echo
    log "Build type: $BUILD_TYPE"
    case $BUILD_TYPE in
        debug|minimal)
            log "Features: Debug/minimal build for development"
            ;;
        release|standard)
            log "Features: Optimized release build with standard features"
            ;;
        optimized|maximum)
            log "Features: Fully optimized build with all features enabled"
            ;;
        static)
            log "Features: Self-contained static binary"
            ;;
    esac
    echo
    success "{{.Tool.Name}} installation completed successfully!"
    log "You can now use the '{{.Tool.BinaryName}}' command"
    echo
{{if eq .Tool.Name "ffmpeg"}}    log "Usage examples:"
    log "  {{.Tool.BinaryName}} -i input.mp4 output.avi       # Convert video format"
    log "  {{.Tool.BinaryName}} -i input.mp4 -vf scale=1280:720 output.mp4  # Resize video"
    log "  {{.Tool.BinaryName}} -i input.mp4 -an output.mp4   # Remove audio track"
    log "  {{.Tool.BinaryName}} -f lavfi -i testsrc=duration=10:size=320x240:rate=30 test.mp4  # Generate test video"{{end}}
{{if eq .Tool.Name "imagemagick"}}    log "Usage examples:"
    log "  convert input.jpg -resize 50% output.jpg     # Resize image"
    log "  convert input.jpg -rotate 90 output.jpg      # Rotate image"
    log "  convert *.jpg output.pdf                     # Convert images to PDF"
    log "  identify image.jpg                           # Get image information"{{end}}
{{if eq .Tool.Name "7zip"}}    log "Usage examples:"
    log "  7z a archive.7z files/                       # Create archive"
    log "  7z x archive.7z                              # Extract archive"
    log "  7z t archive.7z                              # Test archive"
    log "  7z l archive.7z                              # List contents"{{end}}
    echo
    log "Installation paths:"
    log "  {{.Tool.BinaryName}}: $(which {{.Tool.BinaryName}})"
    echo
    log "Script completed in directory: $(pwd)"
else
    error "{{.Tool.Name}} installation verification failed - command not found in PATH"
fi