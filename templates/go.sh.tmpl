#!/bin/bash

# {{.Tool.Name}} Installation Script for Debian Linux
# Generated by Gearbox Script Generator - Go Template
# Automated clone, dependency installation, configuration, build, and install
# Usage: ./{{.ScriptName}} [OPTIONS]

set -e  # Exit on any error

# Find the script directory and load common library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_DIR="$(dirname "$SCRIPT_DIR")"

# Source common library for shared functions
if [[ -f "$REPO_DIR/lib/common.sh" ]]; then
    source "$REPO_DIR/lib/common.sh"
else
    echo "ERROR: common.sh not found in $REPO_DIR/lib/" >&2
    exit 1
fi

# Configuration
{{.Tool.Name|upper}}_DIR="{{.RepoName}}"
{{.Tool.Name|upper}}_REPO="{{.Tool.Repository}}"
GO_MIN_VERSION="{{.Language.MinVersion}}"

# Default options
BUILD_TYPE="{{if .Tool.BuildTypes.standard}}standard{{else}}{{index .BuildTypes 0}}{{end}}"
MODE="install"         # config, build, install
SKIP_DEPS=false
RUN_TESTS=false
FORCE_INSTALL=false
{{if .HasShell}}ENABLE_SHELL=true{{end}}

# Show help
show_help() {
    cat << EOF
{{.Tool.Description}}

Usage: $0 [OPTIONS]

Build Types:{{range $buildType, $flag := .Tool.BuildTypes}}
  {{$flag|printf "%-20s"}} {{$buildType}} build{{end}}

Modes:
  -c, --config-only     Configure only (prepare build)
  -b, --build-only      Configure and build (no install)
  -i, --install         Configure, build, and install (default)

Options:
  --skip-deps          Skip dependency installation
  --run-tests          Run test suite after building
  --force              Force reinstallation if already installed{{if .HasShell}}
  --no-shell           Skip shell integration setup{{end}}
  -h, --help           Show this help message

Examples:
  $0                   # Default build and install
  $0 {{(index .Tool.BuildTypes "minimal")}} -c             # Minimal build, config only
  $0 {{(index .Tool.BuildTypes "maximum")}} --run-tests    # Full build with tests

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in{{range $buildType, $flag := .Tool.BuildTypes}}
        {{$flag}})
            BUILD_TYPE="{{$buildType}}"
            shift
            ;;{{end}}
        -c|--config-only)
            MODE="config"
            shift
            ;;
        -b|--build-only)
            MODE="build"
            shift
            ;;
        -i|--install)
            MODE="install"
            shift
            ;;
        --skip-deps)
            SKIP_DEPS=true
            shift
            ;;
        --run-tests)
            RUN_TESTS=true
            shift
            ;;
        --force)
            FORCE_INSTALL=true
            shift
            ;;{{if .HasShell}}
        --no-shell)
            ENABLE_SHELL=false
            shift
            ;;{{end}}
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Version comparison function
version_compare() {
    if [[ $1 == $2 ]]; then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        if [[ -z ${ver2[i]} ]]; then
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]})); then
            return 0
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]})); then
            return 1
        fi
    done
    return 0
}

# Check and install Go
install_go() {
    if command -v go &> /dev/null; then
        local current_version=$(go version | cut -d' ' -f3 | sed 's/go//')
        log "Found Go version: $current_version"
        
        if version_compare $current_version $GO_MIN_VERSION; then
            log "Go version is sufficient (>= $GO_MIN_VERSION)"
            return 0
        else
            warning "Go version $current_version is below minimum required $GO_MIN_VERSION"
        fi
    fi
    
    log "Installing Go $GO_MIN_VERSION..."
    
    # Download and install Go
    local go_archive="go$GO_MIN_VERSION.linux-amd64.tar.gz"
    local download_url="https://golang.org/dl/$go_archive"
    
    # Remove old Go installation
    sudo rm -rf /usr/local/go
    
    # Download Go
    wget -O "$go_archive" "$download_url" || error "Failed to download Go"
    
    # Extract and install
    sudo tar -C /usr/local -xzf "$go_archive" || error "Failed to extract Go"
    
    # Clean up
    rm -f "$go_archive"
    
    # Add Go to PATH
    if [[ ":$PATH:" != *":/usr/local/go/bin:"* ]]; then
        echo 'export PATH="/usr/local/go/bin:$PATH"' >> ~/.bashrc
        export PATH="/usr/local/go/bin:$PATH"
    fi
    
    success "Go installed successfully"
}

# Get go build options based on build type
get_go_build_options() {
    local options=""
    
    case $BUILD_TYPE in
        debug|minimal)
            options="-ldflags='-w'"  # Strip debug info for smaller binary
            ;;
        release|standard)
            options="-ldflags='-s -w'"  # Strip symbol table and debug info
            ;;
        optimized|maximum)
            options="-ldflags='-s -w' -trimpath"  # Full optimization
            ;;
        static)
            options="-ldflags='-s -w -extldflags=-static' -tags netgo"
            ;;
    esac
    
    echo "$options"
}

# Get go install options
get_go_install_options() {
    local install_opts=""
    
    # Go install always uses go.mod for versioning
    if [[ "$FORCE_INSTALL" == true ]]; then
        install_opts="-a"  # Force rebuild of packages
    fi
    
    echo "$install_opts"
}

# Get environment variables for build
get_build_env() {
    case $BUILD_TYPE in
        static)
            echo "CGO_ENABLED=0 GOOS=linux GOARCH=amd64"
            ;;
        optimized|maximum)
            echo "CGO_ENABLED=1"
            ;;
        *)
            echo ""
            ;;
    esac
}

# Install dependencies
install_dependencies() {
    if [[ "$SKIP_DEPS" == true ]]; then
        log "Skipping dependency installation as requested"
        return 0
    fi

    # Update package list
    log "Updating package list..."
    sudo apt update || error "Failed to update package list"

    # Install basic build tools
    log "Installing build tools..."
    sudo apt install -y \
        build-essential \
        git \
        curl \
        wget \
        || error "Failed to install build tools"

{{if .Tool.BuildConfig.SystemDeps}}    # Install tool-specific system dependencies
    log "Installing {{.Tool.Name}} system dependencies..."
    sudo apt install -y \{{range .Tool.BuildConfig.SystemDeps}}
        {{.}} \{{end}}
        || warning "Some system dependencies may not be available"
{{end}}
    # Install Go
    install_go

    success "Dependencies installed successfully"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   error "This script should not be run as root for security reasons"
fi

log "Starting {{.Tool.Name}} $MODE process for Debian Linux"
log "Build type: $BUILD_TYPE"
log "Mode: $MODE"

# Handle {{.Tool.Name}} source code
if [[ -d "${{.Tool.Name|upper}}_DIR" ]]; then
    log "Found existing {{.Tool.Name}} directory: ${{.Tool.Name|upper}}_DIR"
    
    # Check if it's a git repository
    if [[ -d "${{.Tool.Name|upper}}_DIR/.git" ]]; then
        log "Existing directory is a git repository"
        
        # Check if it's the correct repository
        cd "${{.Tool.Name|upper}}_DIR"
        CURRENT_ORIGIN=$(git remote get-url origin 2>/dev/null || echo "")
        
        if [[ "$CURRENT_ORIGIN" == "${{.Tool.Name|upper}}_REPO" ]]; then
            log "Repository origin matches expected {{.Tool.Name}} repository"
            
            log "Pulling latest changes..."
            git pull origin main || git pull origin master || warning "Failed to pull latest changes"
            success "Repository updated successfully"
        else
            warning "Existing git repository has different origin: $CURRENT_ORIGIN"
            cd ..
            rm -rf "${{.Tool.Name|upper}}_DIR"
            log "Cloning {{.Tool.Name}} repository..."
            git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
            cd "${{.Tool.Name|upper}}_DIR"
            success "{{.Tool.Name}} repository cloned successfully"
        fi
        cd ..
    else
        warning "Directory exists but is not a git repository"
        rm -rf "${{.Tool.Name|upper}}_DIR"
        log "Cloning {{.Tool.Name}} repository..."
        git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
        success "{{.Tool.Name}} repository cloned successfully"
    fi
else
    log "Cloning {{.Tool.Name}} repository..."
    git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
    success "{{.Tool.Name}} repository cloned successfully"
fi

# Change to {{.Tool.Name}} directory
cd "${{.Tool.Name|upper}}_DIR"

# Verify we're in the correct directory
if [[ ! -f "go.mod" && ! -f "main.go" ]]; then
    error "Invalid {{.Tool.Name}} source directory - missing go.mod or main.go"
fi

# Install dependencies
install_dependencies

# Ensure go is in PATH
if ! command -v go &> /dev/null; then
    export PATH="/usr/local/go/bin:$PATH"
    if ! command -v go &> /dev/null; then
        error "Go installation not found in PATH"
    fi
fi

# Clean previous build
log "Cleaning previous build files..."
go clean -cache -modcache -testcache || warning "Failed to clean Go cache, continuing..."

# Get build configuration
GO_BUILD_OPTIONS=$(get_go_build_options)
GO_INSTALL_OPTIONS=$(get_go_install_options)
BUILD_ENV=$(get_build_env)

log "Configuring {{.Tool.Name}} with $BUILD_TYPE settings..."
log "Go build options: $GO_BUILD_OPTIONS"
log "Go install options: $GO_INSTALL_OPTIONS"
if [[ -n "$BUILD_ENV" ]]; then
    log "Build environment: $BUILD_ENV"
fi

success "Configuration completed successfully"

# Exit if config-only mode
if [[ "$MODE" == "config" ]]; then
    success "Configuration completed. Run with --build-only or --install to continue."
    if [[ -n "$BUILD_ENV" ]]; then
        success "Build command would be: $BUILD_ENV go build $GO_BUILD_OPTIONS"
    else
        success "Build command would be: go build $GO_BUILD_OPTIONS"
    fi
    exit 0
fi

# Build {{.Tool.Name}}
log "Building {{.Tool.Name}} (this may take a while)..."

if [[ -n "$BUILD_ENV" ]]; then
    if [[ -n "$GO_BUILD_OPTIONS" ]]; then
        env $BUILD_ENV build_with_options go "build $GO_BUILD_OPTIONS"
    else
        env $BUILD_ENV execute_command_safely go build
    fi
else
    if [[ -n "$GO_BUILD_OPTIONS" ]]; then
        build_with_options go "build $GO_BUILD_OPTIONS"
    else
        execute_command_safely go build
    fi
fi

# Verify build output
if [[ ! -f "{{.Tool.BinaryName}}" && ! -f "./{{.Tool.BinaryName}}" ]]; then
    error "Build completed but {{.Tool.BinaryName}} executable not found"
fi

success "Build completed successfully"

# Run tests if requested
if [[ "$RUN_TESTS" == true ]]; then
    log "Running test suite..."
    go test -v ./... || warning "Some tests failed, but continuing"
    success "Test suite completed"
fi

# Exit if build-only mode
if [[ "$MODE" == "build" ]]; then
    success "Build completed. Run with --install to install the binary."
    log "Build output: $(pwd)/{{.Tool.BinaryName}}"
    exit 0
fi

# Install {{.Tool.Name}}
log "Installing {{.Tool.Name}}..."

# Get version for cache operations
version="unknown"
if command -v {{.Tool.BinaryName}} &> /dev/null; then
    version=$({{.Tool.BinaryName}} --version 2>/dev/null | head -1 | cut -d' ' -f2 2>/dev/null || echo "unknown")
fi

# Check if we can use cached binary
if is_cached "{{.Tool.Name}}" "$BUILD_TYPE" "$version"; then
    log "Found cached {{.Tool.Name}} build, using cached version..."
    if get_cached_binary "{{.Tool.Name}}" "$BUILD_TYPE" "$version" "{{.Tool.BinaryName}}"; then
        success "{{.Tool.Name}} installed from cache successfully"
    else
        warning "Failed to use cached binary, proceeding with fresh installation"
        # Install using go install or copy binary
        if [[ -f "go.mod" ]]; then
            if [[ -n "$GO_INSTALL_OPTIONS" ]]; then
                if [[ -n "$BUILD_ENV" ]]; then
                    env $BUILD_ENV build_with_options go "install $GO_INSTALL_OPTIONS ."
                else
                    build_with_options go "install $GO_INSTALL_OPTIONS ."
                fi
            else
                if [[ -n "$BUILD_ENV" ]]; then
                    env $BUILD_ENV execute_command_safely go install .
                else
                    execute_command_safely go install .
                fi
            fi
            
            # Go install puts binaries in $GOPATH/bin or $HOME/go/bin
            GOPATH_BIN="$HOME/go/bin"
            if [[ -n "$GOPATH" ]]; then
                GOPATH_BIN="$GOPATH/bin"
            fi
            
            # Copy from GOPATH to system location
            if [[ -f "$GOPATH_BIN/{{.Tool.BinaryName}}" ]]; then
                sudo cp "$GOPATH_BIN/{{.Tool.BinaryName}}" {{.InstallPath}}/{{.Tool.BinaryName}} || error "Failed to install {{.Tool.BinaryName}}"
                sudo chmod +x {{.InstallPath}}/{{.Tool.BinaryName}}
            else
                error "Go install completed but binary not found in $GOPATH_BIN"
            fi
        else
            # Copy built binary directly
            sudo cp "{{.Tool.BinaryName}}" {{.InstallPath}}/{{.Tool.BinaryName}} || error "Failed to install {{.Tool.BinaryName}}"
            sudo chmod +x {{.InstallPath}}/{{.Tool.BinaryName}}
        fi
        
        # Cache the new build - get fresh version after installation
        version=$({{.Tool.BinaryName}} --version 2>/dev/null | head -1 | cut -d' ' -f2 2>/dev/null || echo "unknown")
        cache_build "{{.Tool.Name}}" "$BUILD_TYPE" "$version" "{{.InstallPath}}/{{.Tool.BinaryName}}"
    fi
else
    # Install using go install or copy binary
    if [[ -f "go.mod" ]]; then
        if [[ -n "$GO_INSTALL_OPTIONS" ]]; then
            if [[ -n "$BUILD_ENV" ]]; then
                env $BUILD_ENV build_with_options go "install $GO_INSTALL_OPTIONS ."
            else
                build_with_options go "install $GO_INSTALL_OPTIONS ."
            fi
        else
            if [[ -n "$BUILD_ENV" ]]; then
                env $BUILD_ENV execute_command_safely go install .
            else
                execute_command_safely go install .
            fi
        fi
        
        # Go install puts binaries in $GOPATH/bin or $HOME/go/bin
        GOPATH_BIN="$HOME/go/bin"
        if [[ -n "$GOPATH" ]]; then
            GOPATH_BIN="$GOPATH/bin"
        fi
        
        # Copy from GOPATH to system location
        if [[ -f "$GOPATH_BIN/{{.Tool.BinaryName}}" ]]; then
            sudo cp "$GOPATH_BIN/{{.Tool.BinaryName}}" {{.InstallPath}}/{{.Tool.BinaryName}} || error "Failed to install {{.Tool.BinaryName}}"
            sudo chmod +x {{.InstallPath}}/{{.Tool.BinaryName}}
        else
            error "Go install completed but binary not found in $GOPATH_BIN"
        fi
    else
        # Copy built binary directly
        sudo cp "{{.Tool.BinaryName}}" {{.InstallPath}}/{{.Tool.BinaryName}} || error "Failed to install {{.Tool.BinaryName}}"
        sudo chmod +x {{.InstallPath}}/{{.Tool.BinaryName}}
    fi
    
    # Cache the new build - get fresh version after installation
    version=$({{.Tool.BinaryName}} --version 2>/dev/null | head -1 | cut -d' ' -f2 2>/dev/null || echo "unknown")
    cache_build "{{.Tool.Name}}" "$BUILD_TYPE" "$version" "{{.InstallPath}}/{{.Tool.BinaryName}}"
fi

{{if .HasShell}}# Setup shell integration if enabled and supported
if [[ "$ENABLE_SHELL" == true ]] && [[ "{{.Tool.Name}}" == "fzf" ]]; then
    log "Setting up shell integration for fzf..."
    # Add fzf key bindings and completion
    if [[ -f ~/.bashrc ]]; then
        if ! grep -q "fzf" ~/.bashrc; then
            echo "" >> ~/.bashrc
            echo "# fzf key bindings and fuzzy completion" >> ~/.bashrc
            echo "source <(fzf --bash)" >> ~/.bashrc
            success "fzf shell integration added to ~/.bashrc"
        else
            log "fzf shell integration already configured"
        fi
    fi
fi
{{end}}

# Verify installation
log "Verifying installation..."
# Force PATH update for verification
export PATH="{{.InstallPath}}:$PATH"
# Clear bash command hash table to ensure new binaries are used
hash -r
if command -v {{.Tool.BinaryName}} &> /dev/null; then
    success "{{.Tool.Name}} installation verified!"
    echo
    log "{{.Tool.Name}} version information:"
    {{.Tool.BinaryName}} {{if .Tool.TestCommand}}{{.Tool.TestCommand}}{{else}}--version{{end}}
    echo
    log "Build type: $BUILD_TYPE"
    case $BUILD_TYPE in
        debug|minimal)
            log "Features: Debug/minimal build for faster compilation"
            ;;
        release|standard)
            log "Features: Optimized release build with standard features"
            ;;
        static)
            log "Features: Self-contained static binary"
            ;;
        optimized|maximum)
            log "Features: Fully optimized build for maximum performance"
            ;;
    esac
    echo
    success "{{.Tool.Name}} installation completed successfully!"
    log "You can now use the '{{.Tool.BinaryName}}' command"
    echo
{{if eq .Tool.Name "fzf"}}    log "Usage examples:"
    log "  {{.Tool.BinaryName}}                           # Interactive file finder"
    log "  find . -type f | {{.Tool.BinaryName}}          # Pipe files to fzf"
    log "  git log --oneline | {{.Tool.BinaryName}}       # Fuzzy find git commits"
    log "  history | {{.Tool.BinaryName}}                 # Fuzzy find command history"{{end}}
{{if eq .Tool.Name "lazygit"}}    log "Usage examples:"
    log "  {{.Tool.BinaryName}}                           # Launch lazygit TUI"
    log "  {{.Tool.BinaryName}} -p /path/to/repo          # Open specific repository"{{end}}
    echo
    log "Installation paths:"
    log "  {{.Tool.BinaryName}}: $(which {{.Tool.BinaryName}})"
    echo
    log "Script completed in directory: $(pwd)"
else
    error "{{.Tool.Name}} installation verification failed - check installation path and permissions"
fi