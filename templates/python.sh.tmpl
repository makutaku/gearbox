#!/bin/bash

# {{.Tool.Name}} Installation Script for Debian Linux
# Generated by Gearbox Script Generator - Python Template
# Automated clone, dependency installation, configuration, build, and install
# Usage: ./{{.ScriptName}} [OPTIONS]

set -e  # Exit on any error

# Find the script directory and load common library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_DIR="$(dirname "$SCRIPT_DIR")"

# Source common library for shared functions
if [[ -f "$REPO_DIR/lib/common.sh" ]]; then
    source "$REPO_DIR/lib/common.sh"
else
    echo "ERROR: common.sh not found in $REPO_DIR/lib/" >&2
    exit 1
fi

# Configuration
{{.Tool.Name|upper}}_DIR="{{.RepoName}}"
{{.Tool.Name|upper}}_REPO="{{.Tool.Repository}}"
PYTHON_MIN_VERSION="{{.Language.MinVersion}}"

# Default options
BUILD_TYPE="{{if .Tool.BuildTypes.standard}}standard{{else}}{{index .BuildTypes 0}}{{end}}"
MODE="install"         # config, build, install
SKIP_DEPS=false
RUN_TESTS=false
FORCE_INSTALL=false
USE_VENV=true

# Show help
show_help() {
    cat << EOF
{{.Tool.Description}}

Usage: $0 [OPTIONS]

Build Types:{{range $buildType, $flag := .Tool.BuildTypes}}
  {{$flag|printf "%-20s"}} {{$buildType}} build{{end}}

Modes:
  -c, --config-only     Configure only (prepare build)
  -b, --build-only      Configure and build (no install)
  -i, --install         Configure, build, and install (default)

Options:
  --skip-deps          Skip dependency installation
  --run-tests          Run test suite after building
  --force              Force reinstallation if already installed
  --no-venv            Install globally instead of in virtual environment
  -h, --help           Show this help message

Examples:
  $0                   # Default build and install
  $0 {{(index .Tool.BuildTypes "minimal")}} -c             # Minimal build, config only
  $0 {{(index .Tool.BuildTypes "maximum")}} --run-tests    # Full build with tests

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in{{range $buildType, $flag := .Tool.BuildTypes}}
        {{$flag}})
            BUILD_TYPE="{{$buildType}}"
            shift
            ;;{{end}}
        -c|--config-only)
            MODE="config"
            shift
            ;;
        -b|--build-only)
            MODE="build"
            shift
            ;;
        -i|--install)
            MODE="install"
            shift
            ;;
        --skip-deps)
            SKIP_DEPS=true
            shift
            ;;
        --run-tests)
            RUN_TESTS=true
            shift
            ;;
        --force)
            FORCE_INSTALL=true
            shift
            ;;
        --no-venv)
            USE_VENV=false
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Version comparison function
version_compare() {
    if [[ $1 == $2 ]]; then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        if [[ -z ${ver2[i]} ]]; then
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]})); then
            return 0
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]})); then
            return 1
        fi
    done
    return 0
}

# Check and install Python
install_python() {
    if command -v python3 &> /dev/null; then
        local current_version=$(python3 --version | cut -d' ' -f2)
        log "Found Python version: $current_version"
        
        if version_compare $current_version $PYTHON_MIN_VERSION; then
            log "Python version is sufficient (>= $PYTHON_MIN_VERSION)"
            return 0
        else
            warning "Python version $current_version is below minimum required $PYTHON_MIN_VERSION"
        fi
    fi
    
    log "Installing Python development packages..."
    sudo apt install -y \
        python3 \
        python3-pip \
        python3-venv \
        python3-dev \
        python3-wheel \
        python3-setuptools \
        || error "Failed to install Python packages"
    
    success "Python installed successfully"
}

# Get pip install options based on build type
get_pip_install_options() {
    local options=""
    
    case $BUILD_TYPE in
        debug|minimal)
            options="--no-deps --no-cache-dir"
            ;;
        release|standard)
            options="--no-cache-dir"
            ;;
        optimized|maximum)
            options="--no-cache-dir --compile"
            ;;
    esac
    
    if [[ "$FORCE_INSTALL" == true ]]; then
        options="$options --force-reinstall"
    fi
    
    if [[ "$USE_VENV" == false ]]; then
        options="$options --break-system-packages"
    fi
    
    echo "$options"
}

# Install dependencies
install_dependencies() {
    if [[ "$SKIP_DEPS" == true ]]; then
        log "Skipping dependency installation as requested"
        return 0
    fi

    # Update package list
    log "Updating package list..."
    sudo apt update || error "Failed to update package list"

    # Install basic build tools
    log "Installing build tools..."
    sudo apt install -y \
        build-essential \
        git \
        curl \
        wget \
        pkg-config \
        || error "Failed to install build tools"

{{if .Tool.BuildConfig.SystemDeps}}    # Install tool-specific system dependencies
    log "Installing {{.Tool.Name}} system dependencies..."
    sudo apt install -y \{{range .Tool.BuildConfig.SystemDeps}}
        {{.}} \{{end}}
        || warning "Some system dependencies may not be available"
{{end}}
    # Install Python
    install_python

    success "Dependencies installed successfully"
}

# Setup virtual environment
setup_venv() {
    if [[ "$USE_VENV" == false ]]; then
        log "Skipping virtual environment setup"
        return 0
    fi
    
    local venv_dir="{{.Tool.Name}}-venv"
    
    if [[ -d "$venv_dir" ]]; then
        log "Found existing virtual environment: $venv_dir"
        source "$venv_dir/bin/activate" || error "Failed to activate virtual environment"
    else
        log "Creating virtual environment: $venv_dir"
        python3 -m venv "$venv_dir" || error "Failed to create virtual environment"
        source "$venv_dir/bin/activate" || error "Failed to activate virtual environment"
        
        # Upgrade pip in virtual environment
        pip install --upgrade pip setuptools wheel || warning "Failed to upgrade pip"
    fi
    
    success "Virtual environment activated"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   error "This script should not be run as root for security reasons"
fi

log "Starting {{.Tool.Name}} $MODE process for Debian Linux"
log "Build type: $BUILD_TYPE"
log "Mode: $MODE"
log "Use virtual environment: $USE_VENV"

# Handle {{.Tool.Name}} source code
if [[ -d "${{.Tool.Name|upper}}_DIR" ]]; then
    log "Found existing {{.Tool.Name}} directory: ${{.Tool.Name|upper}}_DIR"
    
    # Check if it's a git repository
    if [[ -d "${{.Tool.Name|upper}}_DIR/.git" ]]; then
        log "Existing directory is a git repository"
        
        # Check if it's the correct repository
        cd "${{.Tool.Name|upper}}_DIR"
        CURRENT_ORIGIN=$(git remote get-url origin 2>/dev/null || echo "")
        
        if [[ "$CURRENT_ORIGIN" == "${{.Tool.Name|upper}}_REPO" ]]; then
            log "Repository origin matches expected {{.Tool.Name}} repository"
            
            log "Pulling latest changes..."
            git pull origin main || git pull origin master || warning "Failed to pull latest changes"
            success "Repository updated successfully"
        else
            warning "Existing git repository has different origin: $CURRENT_ORIGIN"
            cd ..
            rm -rf "${{.Tool.Name|upper}}_DIR"
            log "Cloning {{.Tool.Name}} repository..."
            git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
            cd "${{.Tool.Name|upper}}_DIR"
            success "{{.Tool.Name}} repository cloned successfully"
        fi
        cd ..
    else
        warning "Directory exists but is not a git repository"
        rm -rf "${{.Tool.Name|upper}}_DIR"
        log "Cloning {{.Tool.Name}} repository..."
        git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
        success "{{.Tool.Name}} repository cloned successfully"
    fi
else
    log "Cloning {{.Tool.Name}} repository..."
    git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
    success "{{.Tool.Name}} repository cloned successfully"
fi

# Change to {{.Tool.Name}} directory
cd "${{.Tool.Name|upper}}_DIR"

# Verify we're in the correct directory
if [[ ! -f "setup.py" && ! -f "pyproject.toml" && ! -f "requirements.txt" ]]; then
    error "Invalid {{.Tool.Name}} source directory - missing Python project files"
fi

# Install dependencies
install_dependencies

# Setup virtual environment
setup_venv

# Get build configuration
PIP_INSTALL_OPTIONS=$(get_pip_install_options)

log "Configuring {{.Tool.Name}} with $BUILD_TYPE settings..."
log "Pip install options: $PIP_INSTALL_OPTIONS"
log "Virtual environment: $USE_VENV"

success "Configuration completed successfully"

# Exit if config-only mode
if [[ "$MODE" == "config" ]]; then
    success "Configuration completed. Run with --build-only or --install to continue."
    success "Install command would be: pip install $PIP_INSTALL_OPTIONS ."
    exit 0
fi

# Build {{.Tool.Name}} (for Python, this is mainly installing dependencies)
log "Installing {{.Tool.Name}} dependencies and building..."

# Install project dependencies
if [[ -f "requirements.txt" ]]; then
    log "Installing requirements.txt dependencies..."
    pip install $PIP_INSTALL_OPTIONS -r requirements.txt || error "Failed to install dependencies"
fi

if [[ -f "setup.py" ]]; then
    log "Building with setup.py..."
    python setup.py build || error "Failed to build {{.Tool.Name}}"
elif [[ -f "pyproject.toml" ]]; then
    log "Building with pyproject.toml..."
    pip install $PIP_INSTALL_OPTIONS build || error "Failed to install build tool"
    python -m build || error "Failed to build {{.Tool.Name}}"
fi

success "Build completed successfully"

# Run tests if requested
if [[ "$RUN_TESTS" == true ]]; then
    log "Running test suite..."
    if [[ -f "pytest.ini" || -f "setup.cfg" ]] || command -v pytest &> /dev/null; then
        pytest || warning "Some tests failed, but continuing"
    elif [[ -f "test_*.py" ]] || find . -name "test_*.py" -type f | grep -q .; then
        python -m unittest discover || warning "Some tests failed, but continuing"
    else
        warning "No test framework found, skipping tests"
    fi
    success "Test suite completed"
fi

# Exit if build-only mode
if [[ "$MODE" == "build" ]]; then
    success "Build completed. Run with --install to install the package."
    exit 0
fi

# Install {{.Tool.Name}}
log "Installing {{.Tool.Name}}..."

# Get version for cache operations
version="unknown"
if command -v {{.Tool.BinaryName}} &> /dev/null; then
    version=$({{.Tool.BinaryName}} --version 2>/dev/null | head -1 | cut -d' ' -f2 2>/dev/null || echo "unknown")
fi

# Check if we can use cached installation
if is_cached "{{.Tool.Name}}" "$BUILD_TYPE" "$version"; then
    log "Found cached {{.Tool.Name}} build, checking if installation is needed..."
    # For Python tools, we typically check if the command is available
    if command -v {{.Tool.BinaryName}} &> /dev/null && [[ "$FORCE_INSTALL" == false ]]; then
        success "{{.Tool.Name}} already installed and cached"
    else
        warning "Cached version not available or force install requested"
        # Install the package
        if [[ -f "setup.py" ]]; then
            pip install $PIP_INSTALL_OPTIONS . || error "Failed to install {{.Tool.Name}}"
        elif [[ -f "pyproject.toml" ]]; then
            pip install $PIP_INSTALL_OPTIONS . || error "Failed to install {{.Tool.Name}}"
        else
            pip install $PIP_INSTALL_OPTIONS {{.Tool.Repository}} || error "Failed to install {{.Tool.Name}}"
        fi
        
        # Cache the installation - get fresh version after installation
        version=$({{.Tool.BinaryName}} --version 2>/dev/null | head -1 | cut -d' ' -f2 2>/dev/null || echo "unknown")
        cache_build "{{.Tool.Name}}" "$BUILD_TYPE" "$version" "$(which {{.Tool.BinaryName}} 2>/dev/null || echo 'installed')"
    fi
else
    # Install the package
    if [[ -f "setup.py" ]]; then
        pip install $PIP_INSTALL_OPTIONS . || error "Failed to install {{.Tool.Name}}"
    elif [[ -f "pyproject.toml" ]]; then
        pip install $PIP_INSTALL_OPTIONS . || error "Failed to install {{.Tool.Name}}"
    else
        pip install $PIP_INSTALL_OPTIONS {{.Tool.Repository}} || error "Failed to install {{.Tool.Name}}"
    fi
    
    # Cache the installation - get fresh version after installation
    version=$({{.Tool.BinaryName}} --version 2>/dev/null | head -1 | cut -d' ' -f2 2>/dev/null || echo "unknown")
    cache_build "{{.Tool.Name}}" "$BUILD_TYPE" "$version" "$(which {{.Tool.BinaryName}} 2>/dev/null || echo 'installed')"
fi

# Create system-wide wrapper if using virtual environment
if [[ "$USE_VENV" == true ]]; then
    local venv_dir="{{.Tool.Name}}-venv"
    local venv_binary="$PWD/$venv_dir/bin/{{.Tool.BinaryName}}"
    
    if [[ -f "$venv_binary" ]]; then
        log "Creating system-wide wrapper script..."
        
        # Create wrapper script
        sudo tee {{.InstallPath}}/{{.Tool.BinaryName}} > /dev/null << EOF
#!/bin/bash
# {{.Tool.Name}} wrapper script - generated by gearbox
exec "$venv_binary" "\$@"
EOF
        
        sudo chmod +x {{.InstallPath}}/{{.Tool.BinaryName}}
        success "System-wide wrapper created"
    else
        warning "Virtual environment binary not found, {{.Tool.BinaryName}} may not be available system-wide"
    fi
fi

# Verify installation
log "Verifying installation..."
# Update PATH to include install location
export PATH="{{.InstallPath}}:$PATH"
# Clear bash command hash table
hash -r

if command -v {{.Tool.BinaryName}} &> /dev/null; then
    success "{{.Tool.Name}} installation verified!"
    echo
    log "{{.Tool.Name}} version information:"
    {{.Tool.BinaryName}} {{if .Tool.TestCommand}}{{.Tool.TestCommand}}{{else}}--version{{end}} || echo "Version command not available"
    echo
    log "Build type: $BUILD_TYPE"
    log "Virtual environment: $USE_VENV"
    case $BUILD_TYPE in
        debug|minimal)
            log "Features: Minimal installation with basic dependencies"
            ;;
        release|standard)
            log "Features: Standard installation with full dependencies"
            ;;
        optimized|maximum)
            log "Features: Optimized installation with compiled bytecode"
            ;;
    esac
    echo
    success "{{.Tool.Name}} installation completed successfully!"
    log "You can now use the '{{.Tool.BinaryName}}' command"
    echo
    log "Installation paths:"
    if [[ "$USE_VENV" == true ]]; then
        log "  Virtual env: $(pwd)/{{.Tool.Name}}-venv"
        log "  Wrapper: {{.InstallPath}}/{{.Tool.BinaryName}}"
    else
        log "  {{.Tool.BinaryName}}: $(which {{.Tool.BinaryName}})"
    fi
    echo
    log "Script completed in directory: $(pwd)"
else
    error "{{.Tool.Name}} installation verification failed - command not found in PATH"
fi