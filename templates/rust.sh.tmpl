#!/bin/bash

# {{.Tool.Name}} Installation Script for Debian Linux
# Generated by Gearbox Script Generator - Rust Template
# Automated clone, dependency installation, configuration, build, and install
# Usage: ./{{.ScriptName}} [OPTIONS]

set -e  # Exit on any error

# Find the script directory and load common library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_DIR="$(dirname "$SCRIPT_DIR")"

# Source common library for shared functions
if [[ -f "$REPO_DIR/lib/common.sh" ]]; then
    source "$REPO_DIR/lib/common.sh"
else
    echo "ERROR: common.sh not found in $REPO_DIR/lib/" >&2
    exit 1
fi

# Configuration
{{.Tool.Name|upper}}_DIR="{{.RepoName}}"
{{.Tool.Name|upper}}_REPO="{{.Tool.Repository}}"
RUST_MIN_VERSION="{{.Language.MinVersion}}"

# Default options
BUILD_TYPE="{{if .Tool.BuildTypes.standard}}standard{{else}}{{index .BuildTypes 0}}{{end}}"
MODE="install"         # config, build, install
SKIP_DEPS=false
RUN_TESTS=false
FORCE_INSTALL=false
{{if .HasPCRE2}}ENABLE_PCRE2=true{{end}}
{{if .HasShell}}ENABLE_SHELL=true{{end}}

# Show help
show_help() {
    cat << EOF
{{.Tool.Description}}

Usage: $0 [OPTIONS]

Build Types:{{range $buildType, $flag := .Tool.BuildTypes}}
  {{$flag|printf "%-20s"}} {{$buildType}} build{{end}}

Modes:
  -c, --config-only     Configure only (prepare build)
  -b, --build-only      Configure and build (no install)
  -i, --install         Configure, build, and install (default)

Options:
  --skip-deps          Skip dependency installation
  --run-tests          Run test suite after building
  --force              Force reinstallation if already installed{{if .HasPCRE2}}
  --no-pcre2           Build without PCRE2 support{{end}}{{if .HasShell}}
  --no-shell           Skip shell integration setup{{end}}
  -h, --help           Show this help message

Examples:
  $0                   # Default build and install
  $0 {{(index .Tool.BuildTypes "minimal")}} -c             # Minimal build, config only
  $0 {{(index .Tool.BuildTypes "maximum")}} --run-tests    # Full build with tests

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in{{range $buildType, $flag := .Tool.BuildTypes}}
        {{$flag}})
            BUILD_TYPE="{{$buildType}}"
            shift
            ;;{{end}}
        -c|--config-only)
            MODE="config"
            shift
            ;;
        -b|--build-only)
            MODE="build"
            shift
            ;;
        -i|--install)
            MODE="install"
            shift
            ;;
        --skip-deps)
            SKIP_DEPS=true
            shift
            ;;
        --run-tests)
            RUN_TESTS=true
            shift
            ;;
        --force)
            FORCE_INSTALL=true
            shift
            ;;{{if .HasPCRE2}}
        --no-pcre2)
            ENABLE_PCRE2=false
            shift
            ;;{{end}}{{if .HasShell}}
        --no-shell)
            ENABLE_SHELL=false
            shift
            ;;{{end}}
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Version comparison function
version_compare() {
    if [[ $1 == $2 ]]; then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        if [[ -z ${ver2[i]} ]]; then
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]})); then
            return 0
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]})); then
            return 1
        fi
    done
    return 0
}

# Check and install Rust
install_rust() {
    if command -v rustc &> /dev/null; then
        local current_version=$(rustc --version | cut -d' ' -f2)
        log "Found Rust version: $current_version"
        
        if version_compare $current_version $RUST_MIN_VERSION; then
            log "Rust version is sufficient (>= $RUST_MIN_VERSION)"
            return 0
        else
            warning "Rust version $current_version is below minimum required $RUST_MIN_VERSION"
            log "Updating Rust..."
            rustup update || error "Failed to update Rust"
            success "Rust updated successfully"
        fi
    else
        log "Rust not found, installing..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y || error "Failed to install Rust"
        source ~/.cargo/env || error "Failed to source Rust environment"
        success "Rust installed successfully"
    fi
}

# Get cargo build options based on build type
get_cargo_build_options() {
    local options="build --release --locked"
    
    case $BUILD_TYPE in
        debug|minimal)
            options="build"
            ;;
        release|standard)
            options="build --release --locked"
            ;;
        optimized|maximum)
            options="build --release --locked"
            ;;
        static)
            options="build --release --locked --target x86_64-unknown-linux-musl"
            ;;
    esac
    
{{if .HasPCRE2}}    # Add PCRE2 feature if enabled
    if [[ "$ENABLE_PCRE2" == true ]]; then
        options="$options --features pcre2"
    fi
{{end}}    
    echo "$options"
}

# Get cargo install options
get_cargo_install_options() {
    local install_opts="install --path . --locked"
    
    if [[ "$FORCE_INSTALL" == true ]]; then
        install_opts="$install_opts --force"
    fi
    
{{if .HasPCRE2}}    # Add PCRE2 feature if enabled
    if [[ "$ENABLE_PCRE2" == true ]]; then
        install_opts="$install_opts --features pcre2"
    fi
{{end}}    
    echo "$install_opts"
}

# Get environment variables for build
get_build_env() {
    case $BUILD_TYPE in
        optimized|maximum)
            echo "RUSTFLAGS=\"-C target-cpu=native\""
            ;;
        static)
{{if .HasPCRE2}}            if [[ "$ENABLE_PCRE2" == true ]]; then
                echo "PCRE2_SYS_STATIC=1"
            fi{{end}}
            ;;
        *)
            echo ""
            ;;
    esac
}

# Install dependencies
install_dependencies() {
    if [[ "$SKIP_DEPS" == true ]]; then
        log "Skipping dependency installation as requested"
        return 0
    fi

    # Update package list
    log "Updating package list..."
    sudo apt update || error "Failed to update package list"

    # Install basic build tools
    log "Installing build tools..."
    sudo apt install -y \
        build-essential \
        git \
        curl \
        pkg-config \
        || error "Failed to install build tools"

{{if .HasPCRE2}}    # Install PCRE2 development libraries if enabled
    if [[ "$ENABLE_PCRE2" == true ]]; then
        log "Installing PCRE2 development libraries..."
        sudo apt install -y \
            libpcre2-dev \
            libpcre2-posix2 \
            || warning "PCRE2 libraries not available, will build from source"
    fi
{{end}}
    # Install MUSL tools for static builds
    if [[ "$BUILD_TYPE" == "static" ]]; then
        log "Installing MUSL tools for static build..."
        sudo apt install -y \
            musl-tools \
            musl-dev \
            || warning "MUSL tools not available, static build may fail"
    fi

{{if .Tool.BuildConfig.SystemDeps}}    # Install tool-specific system dependencies
    log "Installing {{.Tool.Name}} system dependencies..."
    sudo apt install -y \{{range .Tool.BuildConfig.SystemDeps}}
        {{.}} \{{end}}
        || warning "Some system dependencies may not be available"
{{end}}
    # Install Rust
    install_rust

    # Add MUSL target for static builds
    if [[ "$BUILD_TYPE" == "static" ]]; then
        log "Adding MUSL target for static builds..."
        rustup target add x86_64-unknown-linux-musl || warning "Failed to add MUSL target"
    fi

    success "Dependencies installed successfully"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   error "This script should not be run as root for security reasons"
fi

log "Starting {{.Tool.Name}} $MODE process for Debian Linux"
log "Build type: $BUILD_TYPE"
log "Mode: $MODE"
{{if .HasPCRE2}}log "PCRE2 support: $ENABLE_PCRE2"{{end}}

# Handle {{.Tool.Name}} source code
if [[ -d "${{.Tool.Name|upper}}_DIR" ]]; then
    log "Found existing {{.Tool.Name}} directory: ${{.Tool.Name|upper}}_DIR"
    
    # Check if it's a git repository
    if [[ -d "${{.Tool.Name|upper}}_DIR/.git" ]]; then
        log "Existing directory is a git repository"
        
        # Check if it's the correct repository
        cd "${{.Tool.Name|upper}}_DIR"
        CURRENT_ORIGIN=$(git remote get-url origin 2>/dev/null || echo "")
        
        if [[ "$CURRENT_ORIGIN" == "${{.Tool.Name|upper}}_REPO" ]]; then
            log "Repository origin matches expected {{.Tool.Name}} repository"
            
            log "Pulling latest changes..."
            git pull origin main || git pull origin master || warning "Failed to pull latest changes"
            success "Repository updated successfully"
        else
            warning "Existing git repository has different origin: $CURRENT_ORIGIN"
            cd ..
            rm -rf "${{.Tool.Name|upper}}_DIR"
            log "Cloning {{.Tool.Name}} repository..."
            git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
            cd "${{.Tool.Name|upper}}_DIR"
            success "{{.Tool.Name}} repository cloned successfully"
        fi
        cd ..
    else
        warning "Directory exists but is not a git repository"
        rm -rf "${{.Tool.Name|upper}}_DIR"
        log "Cloning {{.Tool.Name}} repository..."
        git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
        success "{{.Tool.Name}} repository cloned successfully"
    fi
else
    log "Cloning {{.Tool.Name}} repository..."
    git clone "${{.Tool.Name|upper}}_REPO" "${{.Tool.Name|upper}}_DIR" || error "Failed to clone {{.Tool.Name}} repository"
    success "{{.Tool.Name}} repository cloned successfully"
fi

# Change to {{.Tool.Name}} directory
cd "${{.Tool.Name|upper}}_DIR"

# Verify we're in the correct directory
if [[ ! -f "Cargo.toml" ]]; then
    error "Invalid {{.Tool.Name}} source directory - missing Cargo.toml"
fi

# Install dependencies
install_dependencies

# Ensure cargo is in PATH
if ! command -v cargo &> /dev/null; then
    source ~/.cargo/env || error "Failed to source Rust environment"
fi

# Clean previous build
log "Cleaning previous build files..."
cargo clean || warning "Failed to clean previous build, continuing..."

# Get build configuration
CARGO_BUILD_OPTIONS=$(get_cargo_build_options)
CARGO_INSTALL_OPTIONS=$(get_cargo_install_options)
BUILD_ENV=$(get_build_env)

log "Configuring {{.Tool.Name}} with $BUILD_TYPE settings..."
log "Cargo build options: $CARGO_BUILD_OPTIONS"
log "Cargo install options: $CARGO_INSTALL_OPTIONS"
if [[ -n "$BUILD_ENV" ]]; then
    log "Build environment: $BUILD_ENV"
fi

success "Configuration completed successfully"

# Exit if config-only mode
if [[ "$MODE" == "config" ]]; then
    success "Configuration completed. Run with --build-only or --install to continue."
    if [[ -n "$BUILD_ENV" ]]; then
        success "Build command would be: $BUILD_ENV cargo $CARGO_BUILD_OPTIONS"
    else
        success "Build command would be: cargo $CARGO_BUILD_OPTIONS"
    fi
    exit 0
fi

# Build {{.Tool.Name}}
log "Building {{.Tool.Name}} (this may take a while)..."

if [[ -n "$BUILD_ENV" ]]; then
    if [[ -n "$CARGO_BUILD_OPTIONS" ]]; then
        env $BUILD_ENV build_with_options cargo "$CARGO_BUILD_OPTIONS"
    else
        env $BUILD_ENV execute_command_safely cargo build
    fi
else
    if [[ -n "$CARGO_BUILD_OPTIONS" ]]; then
        build_with_options cargo "$CARGO_BUILD_OPTIONS"
    else
        execute_command_safely cargo build
    fi
fi

# Verify build output
BUILD_DIR="target"
if [[ "$BUILD_TYPE" == "debug" || "$BUILD_TYPE" == "minimal" ]]; then
    BUILD_DIR="$BUILD_DIR/debug"
elif [[ "$BUILD_TYPE" == "static" ]]; then
    BUILD_DIR="$BUILD_DIR/x86_64-unknown-linux-musl/release"
else
    BUILD_DIR="$BUILD_DIR/release"
fi

if [[ ! -f "$BUILD_DIR/{{.Tool.BinaryName}}" ]]; then
    error "Build completed but {{.Tool.BinaryName}} executable not found in $BUILD_DIR"
fi

success "Build completed successfully"

# Run tests if requested
if [[ "$RUN_TESTS" == true ]]; then
    log "Running test suite..."
{{if .HasPCRE2}}    if [[ "$ENABLE_PCRE2" == true ]]; then
        cargo test --verbose --workspace --features pcre2 || warning "Some tests failed, but continuing"
    else
        cargo test --verbose --workspace || warning "Some tests failed, but continuing"
    fi{{else}}    cargo test --verbose --workspace || warning "Some tests failed, but continuing"{{end}}
    success "Test suite completed"
fi

# Exit if build-only mode
if [[ "$MODE" == "build" ]]; then
    success "Build completed. Run with --install or use 'cargo install --path .' to install."
    log "Build output: $(pwd)/$BUILD_DIR/{{.Tool.BinaryName}}"
    exit 0
fi

# Install {{.Tool.Name}}
log "Installing {{.Tool.Name}}..."

# Get version for cache operations
version="unknown"
if command -v {{.Tool.BinaryName}} &> /dev/null; then
    version=$({{.Tool.BinaryName}} --version | head -1 | cut -d' ' -f2 2>/dev/null || echo "unknown")
fi

# Check if we can use cached binary
if is_cached "{{.Tool.Name}}" "$BUILD_TYPE" "$version"; then
    log "Found cached {{.Tool.Name}} build, using cached version..."
    if get_cached_binary "{{.Tool.Name}}" "$BUILD_TYPE" "$version" "{{.Tool.BinaryName}}"; then
        # Add cargo bin to PATH if not already there
        if [[ ":$PATH:" != *":$HOME/.cargo/bin:"* ]]; then
            log "Adding ~/.cargo/bin to PATH..."
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc
            export PATH="$HOME/.cargo/bin:$PATH"
            warning "You may need to restart your shell or run 'source ~/.bashrc' for PATH changes to take effect"
        fi
        
        success "{{.Tool.Name}} installed from cache successfully"
        # Skip to verification since cached binary is already in /usr/local/bin/
    else
        warning "Failed to use cached binary, proceeding with fresh installation"
        # Continue with fresh installation below
    fi
fi

# Fresh installation (if not using cached binary)
if ! is_cached "{{.Tool.Name}}" "$BUILD_TYPE" "$version" || ! get_cached_binary "{{.Tool.Name}}" "$BUILD_TYPE" "$version" "{{.Tool.BinaryName}}" &>/dev/null; then
    if [[ -n "$CARGO_INSTALL_OPTIONS" ]]; then
        build_with_options cargo "$CARGO_INSTALL_OPTIONS"
    else
        execute_command_safely cargo install --path . --locked
    fi
    
    # Add cargo bin to PATH if not already there
    if [[ ":$PATH:" != *":$HOME/.cargo/bin:"* ]]; then
        log "Adding ~/.cargo/bin to PATH..."
        echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc
        export PATH="$HOME/.cargo/bin:$PATH"
        warning "You may need to restart your shell or run 'source ~/.bashrc' for PATH changes to take effect"
    fi
    
    # Create system-wide symlink to ensure our version takes precedence
    log "Creating system-wide symlink..."
    sudo ln -sf "$HOME/.cargo/bin/{{.Tool.BinaryName}}" {{.InstallPath}}/{{.Tool.BinaryName}} || warning "Failed to create {{.Tool.BinaryName}} symlink"
    success "Symlink created for {{.Tool.BinaryName}} command"
    
    # Cache the new build - get fresh version after installation
    version=$({{.Tool.BinaryName}} --version | head -1 | cut -d' ' -f2 2>/dev/null || echo "unknown")
    cache_build "{{.Tool.Name}}" "$BUILD_TYPE" "$version" "$HOME/.cargo/bin/{{.Tool.BinaryName}}"
fi

{{if .HasShell}}# Setup shell integration if enabled and supported
if [[ "$ENABLE_SHELL" == true ]] && [[ "{{.Tool.Name}}" == "fzf" ]]; then
    log "Setting up shell integration for fzf..."
    # Add fzf key bindings and completion
    if [[ -f ~/.bashrc ]]; then
        if ! grep -q "fzf" ~/.bashrc; then
            echo "" >> ~/.bashrc
            echo "# fzf key bindings and fuzzy completion" >> ~/.bashrc
            echo "source <(fzf --bash)" >> ~/.bashrc
            success "fzf shell integration added to ~/.bashrc"
        else
            log "fzf shell integration already configured"
        fi
    fi
fi
{{end}}

# Verify installation
log "Verifying installation..."
# Force PATH update for verification
export PATH="{{.InstallPath}}:$HOME/.cargo/bin:$PATH"
# Clear bash command hash table to ensure new symlinks are used
hash -r
if command -v {{.Tool.BinaryName}} &> /dev/null; then
    success "{{.Tool.Name}} installation verified!"
    echo
    log "{{.Tool.Name}} version information:"
    {{.Tool.BinaryName}} {{if .Tool.TestCommand}}{{.Tool.TestCommand}}{{else}}--version{{end}}
    echo
    log "Build type: $BUILD_TYPE"
{{if .HasPCRE2}}    log "PCRE2 support: $ENABLE_PCRE2"{{end}}
    case $BUILD_TYPE in
        debug|minimal)
            log "Features: Debug/minimal build for faster compilation"
            ;;
        release|standard)
            log "Features: Optimized release build with standard features"
            ;;
        static)
            log "Features: Self-contained static binary (MUSL)"
            ;;
        optimized|maximum)
            log "Features: CPU-optimized build for maximum performance"
            ;;
    esac
    echo
    success "{{.Tool.Name}} installation completed successfully!"
    log "You can now use the '{{.Tool.BinaryName}}' command"
    echo
{{if eq .Tool.Name "fd"}}    log "Usage examples:"
    log "  {{.Tool.BinaryName}} pattern                    # Search for files matching pattern"
    log "  {{.Tool.BinaryName}} -t f pattern               # Search only files (not directories)"
    log "  {{.Tool.BinaryName}} -e rs                      # Search for .rs files"
    log "  {{.Tool.BinaryName}} -H pattern                 # Include hidden files"{{end}}
{{if eq .Tool.Name "ripgrep"}}    log "Usage examples:"
    log "  {{.Tool.BinaryName}} pattern                    # Search for pattern in current directory"
    log "  {{.Tool.BinaryName}} -i pattern                 # Case-insensitive search"
    log "  {{.Tool.BinaryName}} -t py pattern              # Search only in Python files"
    log "  {{.Tool.BinaryName}} -C 3 pattern               # Show 3 lines of context"
{{if .HasPCRE2}}    if [[ "$ENABLE_PCRE2" == true ]]; then
        log "  {{.Tool.BinaryName}} -P '(?<=foo)bar'           # PCRE2 lookbehind (use -P flag)"
    fi{{end}}{{end}}
    echo
    log "Installation paths:"
    log "  {{.Tool.BinaryName}}: $(which {{.Tool.BinaryName}})"
    echo
    log "To use immediately in this terminal, run:"
    log "  hash -r && source ~/.bashrc"
    log "Or simply open a new terminal window"
    log "Script completed in directory: $(pwd)"
else
    error "{{.Tool.Name}} installation verification failed - try restarting your shell or run 'source ~/.bashrc'"
fi